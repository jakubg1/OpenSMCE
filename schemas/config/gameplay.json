{
    "$schema": "http://json-schema.org/draft-07/schema",
    "type": "object",
    "description": "The root entry.",
    "properties": {
        "$schema": true,
        "ui": {
            "type": "object",
            "description": "Defines parameters which are constant throughout the entire UI.",
            "properties": {
                "buttonClickSound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "The default Sound Event that will be played whenever a UI button has been clicked."
                },
                "buttonHoverSound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "The default Sound Event that will be played whenever a UI button has been hovered with a mouse cursor."
                },
                "buttonReleaseSound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "The default Sound Event that will be played whenever a UI button has been released (unpressed)."
                }
            },
            "additionalProperties": false
        },
        "sphereBehavior": {
            "type": "object",
            "description": "Defines behavior of the spheres.",
            "properties": {
                "acceleration": {
                    "type": "number",
                    "description": "The default acceleration rate of spheres being pushed."
                },
                "attractionAcceleration": {
                    "type": "number",
                    "description": "The acceleration rate of spheres magnetizing to each other."
                },
                "attractionForwardDecceleration": {
                    "type": "number",
                    "description": "The decceleration rate of spheres when magnetizing to the group behind while still moving forward."
                },
                "attractionForwardDeccelerationScarab": {
                    "type": "number",
                    "description": "The decceleration rate of spheres when magnetizing to a scarab behind while still moving forward."
                },
                "decceleration": {
                    "type": "number",
                    "description": "The default decceleration rate of spheres."
                },
                "backwardsDecceleration": {
                    "type": "number",
                    "description": "The decceleration rate of spheres when they're moving backwards."
                },
                "attractionSpeedBase": {
                    "type": "number",
                    "description": "Maximum attraction speed of groups of like color being attracted together.\nThis and attractionSpeedMult form a final value together using this expression: attractionSpeedBase + max(1, chain) * attractionSpeedMult.",
                    "markdownDescription": "Maximum attraction speed of groups of like color being attracted together.\nThis and `attractionSpeedMult` form a final value together using this expression: `attractionSpeedBase + max(1, chain) * attractionSpeedMult`."
                },
                "attractionSpeedMult": {
                    "type": "number",
                    "description": "The second value used in the formula. For description look at attractionSpeedBase.",
                    "markdownDescription": "The second value used in the formula. For description look at `attractionSpeedBase`."
                },
                "knockbackSpeedBase": {
                    "type": "number",
                    "description": "Speed induced when a group of spheres crashes into another sphere group behind it.\nThis and knockbackSpeedMult form a final value together using this expression: knockbackSpeedBase + max(1, chain) * knockbackSpeedMult.",
                    "markdownDescription": "Speed induced when a group of spheres crashes into another sphere group behind it.\nThis and `knockbackSpeedMult` form a final value together using this expression: `knockbackSpeedBase + max(1, chain) * knockbackSpeedMult`."
                },
                "knockbackSpeedMult": {
                    "type": "number",
                    "description": "The second value used in the formula. For description look at knockbackSpeedBase.",
                    "markdownDescription": "The second value used in the formula. For description look at `knockbackSpeedBase`."
                },
                "knockbackTime": {
                    "type": "number",
                    "description": "If set, this will be the duration the knockback speed will persist for, in seconds."
                },
                "knockbackStopAfterTime": {
                    "type": "boolean",
                    "description": "Only if knockbackTime is set. If true, the speed of the group will be set to 0 once the knockback time is over. Else, the sphere group will deccelerate normally.",
                    "markdownDescription": "Only if `knockbackTime` is set. If `true`, the speed of the group will be set to 0 once the knockback time is over. Else, the sphere group will deccelerate normally."
                },
                "foulSpeed": {
                    "type": "number",
                    "description": "Maximum speed of spheres when the player fails to complete a level."
                },
                "foulAcceleration": {
                    "type": "number",
                    "description": "The acceleration rate of spheres used only when the player fails to complete a level."
                },
                "foulDestroySpheres": {
                    "type": "object",
                    "description": "Determines how the spheres should be destroyed after the level is failed.",
                    "properties": {
                        "type": {
                            "enum": [
                                "atEnd",
                                "fromEnd"
                            ]
                        }
                    },
                    "allOf": [
                        {
                            "properties": {
                                "type": {
                                    "description": "The type of level fail animation."
                                }
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "type": {
                                        "const": "atEnd",
                                        "description": "The spheres will be destroyed once they reach the final node."
                                    }
                                },
                                "required": [
                                    "type"
                                ]
                            },
                            "then": {
                                "properties": {
                                    "type": true
                                },
                                "additionalProperties": false
                            }
                        },
                        {
                            "if": {
                                "properties": {
                                    "type": {
                                        "const": "fromEnd",
                                        "description": "The spheres will be destroyed starting at the frontmost one every specified amount of time."
                                    }
                                },
                                "required": [
                                    "type"
                                ]
                            },
                            "then": {
                                "properties": {
                                    "type": true,
                                    "delay": {
                                        "type": "number",
                                        "description": "How long it should take for the spheres to start being destroyed, in seconds.",
                                        "minimum": 0.0
                                    },
                                    "subsequentDelay": {
                                        "type": "number",
                                        "description": "The delay between consecutive sphere destructions, in seconds.",
                                        "exclusiveMinimum": 0.0
                                    }
                                },
                                "required": [
                                    "delay",
                                    "subsequentDelay"
                                ],
                                "additionalProperties": false
                            }
                        }
                    ],
                    "required": [
                        "type"
                    ]
                },
                "overspeedCheck": {
                    "type": "boolean",
                    "description": "If true, spheres will never move faster than the maximum speed defined at a given point of the path.",
                    "markdownDescription": "If `true`, spheres will never move faster than the maximum speed defined at a given point of the path."
                },
                "invincibleScarabs": {
                    "type": "boolean",
                    "description": "If true, scarabs cannot be crushed by spheres behind them. Instead, they are pushed.",
                    "markdownDescription": "If `true`, scarabs cannot be crushed by spheres behind them. Instead, they are pushed."
                },
                "invincibleScarabFrontMatters": {
                    "type": "boolean",
                    "description": "If true, the trains at the back cannot push the trains at the front and are instead blocked by them.",
                    "markdownDescription": "If `true`, the trains at the back cannot push the trains at the front and are instead blocked by them."
                },
                "luxorized": {
                    "type": "boolean",
                    "description": "Enables sphere physics gimmicks specific to the original Luxor game to mimic it better."
                },
                "joinSound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "A sound event to be played when two groups of spheres hit each other."
                },
                "newGroupSound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "A sound event to be played when a new sphere chain appears on the board."
                },
                "noScarabs": {
                    "type": "boolean",
                    "description": "If true, the scarabs will not appear in the game.",
                    "markdownDescription": "If `true`, the scarabs will not appear in the game."
                },
                "noScarabAttraction": {
                    "type": "boolean",
                    "description": "If true, the scarab will not attract any spheres.",
                    "markdownDescription": "If `true`, the scarab will not attract any spheres."
                },
                "permitLongMatches": {
                    "type": "boolean",
                    "description": "If true, the spheres will try to make the biggest clump possible before matching together.",
                    "markdownDescription": "If `true`, the spheres will try to make the biggest clump possible before matching together."
                },
                "instantMatches": {
                    "type": "boolean",
                    "description": "If true, the spheres will match instantly when they can match. If the match effect has a delay, the sphere will be attached to the nearest sphere and will match after the specified period of time.",
                    "markdownDescription": "If `true`, the spheres will match instantly when they can match. If the match effect has a delay, the sphere will be attached to the nearest sphere and will match after the specified period of time."
                },
                "cascadeScope": {
                    "type": "string",
                    "description": "Defines the scope of cascade combos.",
                    "oneOf": [
                        {
                            "const": "chain",
                            "description": "Each Sphere Chain has its own cascade combo value, shared across all of their Sphere Groups."
                        },
                        {
                            "const": "path",
                            "description": "Each Path has its own cascade combo value, shared across all of their Sphere Chains and Sphere Groups."
                        },
                        {
                            "const": "level",
                            "description": "The cascade combo value is globalized and there is one counter for the entire level."
                        }
                    ]
                },
                "distanceEvents": {
                    "type": "array",
                    "description": "Specifies any number of Distance Events (Game Events which will happen whenever any Sphere Group moves through a certain point).",
                    "items": {
                        "type": "object",
                        "description": "A single Distance Event.",
                        "properties": {
                            "reference": {
                                "type": "string",
                                "description": "The reference point of the Sphere Group to be checked.",
                                "oneOf": [
                                    {
                                        "const": "front",
                                        "description": "The frontmost point of the Sphere Group will be checked."
                                    },
                                    {
                                        "const": "back",
                                        "description": "The backmost point of the Sphere Group will be checked."
                                    }
                                ]
                            },
                            "distance": {
                                "type": "number",
                                "description": "The percentage of the path through which the reference point should move in order to execute the event."
                            },
                            "forwards": {
                                "type": "boolean",
                                "description": "Whether the event should be executed when the reference point moves forwards."
                            },
                            "backwards": {
                                "type": "boolean",
                                "description": "Whether the event should be executed when the reference point moves backwards."
                            },
                            "event": {
                                "$ref": "../_structures/GameEvent.json",
                                "description": "The Game Event which will be executed when this Distance Event's conditions are satisfied."
                            }
                        },
                        "required": [
                            "reference",
                            "distance",
                            "event"
                        ],
                        "additionalProperties": false
                    }
                }
            },
            "required": [
                "acceleration",
                "decceleration",
                "attractionSpeedBase",
                "attractionSpeedMult",
                "knockbackSpeedBase",
                "knockbackSpeedMult",
                "foulSpeed",
                "foulDestroySpheres",
                "overspeedCheck",
                "joinSound",
                "newGroupSound",
                "permitLongMatches"
            ],
            "additionalProperties": false
        },
        "net": {
            "type": "object",
            "description": "Defines the Net.",
            "properties": {
                "particle": {
                    "$ref": "../_structures/Particle.json",
                    "description": "A persistent particle packet which is spawned when the Net is spawned, and destroyed when the Net expires."
                },
                "sound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "A looping sound event that will be played when the Net is currently active."
                },
                "posY": {
                    "type": "integer",
                    "description": "The Y position of the Net."
                }
            },
            "required": [
                "particle",
                "sound",
                "posY"
            ],
            "additionalProperties": false
        },
        "levelVariables": {
            "type": "object",
            "description": "Defines the starting values for the Level Variables. Keys are variable names, values must be numbers. Level variables will be reset every time the level is retried or a new level is started.",
            "propertyNames": {
                "pattern": "^.*$"
            },
            "patternProperties": {
                "^.*$": {
                    "type": "number",
                    "description": "The value for this Level Variable."
                }
            }
        },
        "levelTimers": {
            "type": "object",
            "description": "Defines the starting values for the Level Timers. Keys are timer names. Level timers will be reset every time the level is retried or a new level is started.",
            "propertyNames": {
                "pattern": "^.*$"
            },
            "patternProperties": {
                "^.*$": {
                    "type": "object",
                    "description": "A single Level Timer.",
                    "properties": {
                        "countDown": {
                            "type": "boolean",
                            "description": "If set, the timer will be counting down instead of up, and will stop at 0 when it ticks down all the way there."
                        },
                        "value": {
                            "type": "number",
                            "description": "The starting value of the timer. Defaults to 0.",
                            "minimum": 0.0
                        }
                    },
                    "additionalProperties": false
                }
            }
        },
        "levelTimerSeries": {
            "type": "object",
            "description": "Defines the Level Timer Series. Keys are names of timer series. Level Timer Series are lists of timers. Entries can be added with various lifespan. Level Timer Series are useful when checking how often certain events happen over a certain period of time.",
            "propertyNames": {
                "pattern": "^.*$"
            },
            "patternProperties": {
                "^.*$": {
                    "type": "object",
                    "description": "A single Level Timer Series.",
                    "properties": {},
                    "additionalProperties": false
                }
            }
        }
    },
    "required": [
        "ui",
        "sphereBehavior"
    ],
    "additionalProperties": false
}