{
    "$schema": "http://json-schema.org/draft-07/schema",
    "type": "object",
    "description": "The root entry.",
    "properties": {
        "$schema": true,
        "levelSequence": {
            "type": "array",
            "description": "Defines a Level Sequence. This is a list of states every level can have and will be performed in order, unless specified otherwise.",
            "items": {
                "$ref": "level_sequence_entry.json",
                "description": "A single sequence step."
            }
        },
        "ui": {
            "type": "object",
            "description": "Defines parameters which are constant throughout the entire UI.",
            "properties": {
                "buttonClickSound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "The sound event that will be played whenever a button is clicked."
                },
                "buttonHoverSound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "The sound event that will be played whenever a mouse is hovering over a button."
                },
                "levelAdvanceSound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "The sound event that will be played whenever the player advances a level (on the level map)."
                }
            },
            "required": [
                "buttonClickSound",
                "buttonHoverSound",
                "levelAdvanceSound"
            ],
            "additionalProperties": false
        },
        "sphereBehavior": {
            "type": "object",
            "description": "Defines behavior of the spheres.",
            "properties": {
                "acceleration": {
                    "type": "number",
                    "description": "The default acceleration rate of spheres being pushed."
                },
                "foulAcceleration": {
                    "type": "number",
                    "description": "The acceleration rate of spheres used only when the player fails to complete a level."
                },
                "attractionAcceleration": {
                    "type": "number",
                    "description": "The acceleration rate of spheres magnetizing to each other."
                },
                "attractionForwardDecceleration": {
                    "type": "number",
                    "description": "The decceleration rate of spheres when magnetizing to the group behind while still moving forward."
                },
                "attractionForwardDeccelerationScarab": {
                    "type": "number",
                    "description": "The decceleration rate of spheres when magnetizing to a scarab behind while still moving forward."
                },
                "decceleration": {
                    "type": "number",
                    "description": "The default decceleration rate of spheres."
                },
                "backwardsDecceleration": {
                    "type": "number",
                    "description": "The decceleration rate of spheres when they're moving backwards."
                },
                "attractionSpeedBase": {
                    "type": "number",
                    "description": "Maximum attraction speed of groups of like color being attracted together.\nThis and attractionSpeedMult form a final value together using this expression: attractionSpeedBase + max(1, chain) * attractionSpeedMult.",
                    "markdownDescription": "Maximum attraction speed of groups of like color being attracted together.\nThis and `attractionSpeedMult` form a final value together using this expression: `attractionSpeedBase + max(1, chain) * attractionSpeedMult`."
                },
                "attractionSpeedMult": {
                    "type": "number",
                    "description": "The second value used in the formula. For description look at attractionSpeedBase.",
                    "markdownDescription": "The second value used in the formula. For description look at `attractionSpeedBase`."
                },
                "knockbackSpeedBase": {
                    "type": "number",
                    "description": "Speed induced when a group of spheres crashes into another sphere group behind it.\nThis and knockbackSpeedMult form a final value together using this expression: knockbackSpeedBase + max(1, chain) * knockbackSpeedMult.",
                    "markdownDescription": "Speed induced when a group of spheres crashes into another sphere group behind it.\nThis and `knockbackSpeedMult` form a final value together using this expression: `knockbackSpeedBase + max(1, chain) * knockbackSpeedMult`."
                },
                "knockbackSpeedMult": {
                    "type": "number",
                    "description": "The second value used in the formula. For description look at knockbackSpeedBase.",
                    "markdownDescription": "The second value used in the formula. For description look at `knockbackSpeedBase`."
                },
                "knockbackTime": {
                    "type": "number",
                    "description": "If set, this will be the duration the knockback speed will persist for, in seconds."
                },
                "knockbackStopAfterTime": {
                    "type": "boolean",
                    "description": "Only if knockbackTime is set. If true, the speed of the group will be set to 0 once the knockback time is over. Else, the sphere group will deccelerate normally.",
                    "markdownDescription": "Only if `knockbackTime` is set. If `true`, the speed of the group will be set to 0 once the knockback time is over. Else, the sphere group will deccelerate normally."
                },
                "foulSpeed": {
                    "type": "number",
                    "description": "Maximum speed of spheres when the player fails to complete a level."
                },
                "overspeedCheck": {
                    "type": "boolean",
                    "description": "If true, spheres will never move faster than the maximum speed defined at a given point of the path.",
                    "markdownDescription": "If `true`, spheres will never move faster than the maximum speed defined at a given point of the path."
                },
                "invincibleScarabs": {
                    "type": "boolean",
                    "description": "If true, scarabs cannot be crushed by spheres behind them. Instead, they are pushed.",
                    "markdownDescription": "If `true`, scarabs cannot be crushed by spheres behind them. Instead, they are pushed."
                },
                "luxorized": {
                    "type": "boolean",
                    "description": "Enables sphere physics gimmicks specific to the original Luxor game to mimic it better."
                },
                "joinSound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "A sound event to be played when two groups of spheres hit each other."
                },
                "newGroupSound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "A sound event to be played when a new sphere chain appears on the board."
                },
                "noScarabs": {
                    "type": "boolean",
                    "description": "If true, the scarabs will not appear in the game.",
                    "markdownDescription": "If `true`, the scarabs will not appear in the game."
                },
                "permitLongMatches": {
                    "type": "boolean",
                    "description": "If true, the spheres will try to make the biggest clump possible before matching together.",
                    "markdownDescription": "If `true`, the spheres will try to make the biggest clump possible before matching together."
                }
            },
            "required": [
                "acceleration",
                "decceleration",
                "attractionSpeedBase",
                "attractionSpeedMult",
                "knockbackSpeedBase",
                "knockbackSpeedMult",
                "foulSpeed",
                "overspeedCheck",
                "invincibleScarabs",
                "joinSound",
                "newGroupSound",
                "noScarabs",
                "permitLongMatches"
            ],
            "additionalProperties": false
        },
        "net": {
            "type": "object",
            "description": "Defines the Net.",
            "properties": {
                "particle": {
                    "$ref": "../_structures/Particle.json",
                    "description": "A persistent particle packet which is spawned when the Net is spawned, and destroyed when the Net expires."
                },
                "sound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "A looping sound event that will be played when the Net is currently active."
                },
                "posY": {
                    "type": "integer",
                    "description": "The Y position of the Net."
                }
            },
            "required": [
                "particle",
                "sound",
                "posY"
            ],
            "additionalProperties": false
        },
        "lightningStorm": {
            "type": "object",
            "description": "Defines the Lightning Storm.",
            "properties": {
                "delay": {
                    "type": "number",
                    "description": "The delay between strikes. Can be formed as an Expression, which will be evaluated after each strike.",
                    "exclusiveMinimum": 0.0
                },
                "particle": {
                    "$ref": "../_structures/Particle.json",
                    "description": "A one-time particle effect which will be spawned on the sphere that's been destroyed."
                },
                "sound": {
                    "$ref": "../_structures/SoundEvent.json",
                    "description": "A sound event to be played when a sphere is destroyed."
                },
                "scoreEvent": {
                    "$ref": "../_structures/ScoreEvent.json",
                    "description": "A Score Event executed on the sphere that's been destroyed."
                }
            },
            "required": [
                "delay",
                "particle",
                "sound",
                "scoreEvent"
            ],
            "additionalProperties": false
        }
    },
    "required": [
        "levelSequence",
        "ui",
        "sphereBehavior"
    ],
    "additionalProperties": false
}