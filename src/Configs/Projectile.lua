--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class ProjectileConfig
---@overload fun(data, path, isAnonymous):ProjectileConfig
local ProjectileConfig = class:derive("ProjectileConfig")

ProjectileConfig.metadata = {
    schemaPath = "projectile.json"
}

---Constructs an instance of ProjectileConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
---@param base ProjectileConfig? If specified, this resource extends the provided resource. Any missing fields are prepended from the base resource.
function ProjectileConfig:new(data, path, isAnonymous, base)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    base = base or {}

    self.particle = u.parseParticleEffectConfigOpt(data, base, path, {"particle"})
    self.speed = u.parseNumber(data, base, path, {"speed"})
    self.spawnDistance = u.parseExprNumberOpt(data, base, path, {"spawnDistance"})
    self.spawnSound = u.parseSoundEventOpt(data, base, path, {"spawnSound"})
    self.sphereAlgorithm = u.parseString(data, base, path, {"sphereAlgorithm"})
    self.homing = u.parseBooleanOpt(data, base, path, {"homing"})
    self.destroyParticle = u.parseParticleEffectConfig(data, base, path, {"destroyParticle"})
    self.destroySound = u.parseSoundEventOpt(data, base, path, {"destroySound"})
    self.destroySphereSelector = u.parseSphereSelectorConfig(data, base, path, {"destroySphereSelector"})
    self.destroyScoreEvent = u.parseScoreEventConfigOpt(data, base, path, {"destroyScoreEvent"})
    self.destroyScoreEventPerSphere = u.parseScoreEventConfigOpt(data, base, path, {"destroyScoreEventPerSphere"})
    self.destroyGameEvent = u.parseGameEventConfigOpt(data, base, path, {"destroyGameEvent"})
    self.destroyGameEventPerSphere = u.parseGameEventConfigOpt(data, base, path, {"destroyGameEventPerSphere"})
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function ProjectileConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a ProjectileConfig by given path.
    ---@param reference string The path to the resource.
    ---@return ProjectileConfig
    function ResourceManager:getProjectileConfig(reference)
        return self:getResourceConfig(reference, "Projectile")
    end
end

return ProjectileConfig