--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class ProjectileConfig
---@overload fun(data, path, isAnonymous):ProjectileConfig
local ProjectileConfig = class:derive("ProjectileConfig")

ProjectileConfig.metadata = {
    schemaPath = "projectile.json"
}

---Constructs an instance of ProjectileConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
function ProjectileConfig:new(data, path, isAnonymous)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    self.particle = u.parseParticleOpt(data.particle, path, "particle")
    self.speed = u.parseNumber(data.speed, path, "speed")
    self.spawnDistance = u.parseExprNumberOpt(data.spawnDistance, path, "spawnDistance")
    self.spawnSound = u.parseSoundEventOpt(data.spawnSound, path, "spawnSound")
    self.sphereAlgorithm = u.parseString(data.sphereAlgorithm, path, "sphereAlgorithm")
    self.homing = u.parseBooleanOpt(data.homing, path, "homing")
    self.destroyParticle = u.parseParticle(data.destroyParticle, path, "destroyParticle")
    self.destroySound = u.parseSoundEventOpt(data.destroySound, path, "destroySound")
    self.destroySphereSelector = u.parseSphereSelectorConfig(data.destroySphereSelector, path, "destroySphereSelector")
    self.destroyScoreEvent = u.parseScoreEventConfigOpt(data.destroyScoreEvent, path, "destroyScoreEvent")
    self.destroyScoreEventPerSphere = u.parseScoreEventConfigOpt(data.destroyScoreEventPerSphere, path, "destroyScoreEventPerSphere")
    self.destroyGameEvent = u.parseGameEventConfigOpt(data.destroyGameEvent, path, "destroyGameEvent")
    self.destroyGameEventPerSphere = u.parseGameEventConfigOpt(data.destroyGameEventPerSphere, path, "destroyGameEventPerSphere")
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function ProjectileConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a ProjectileConfig by a given path or alias.
    ---@param reference string|integer The path or an alias to the resource.
    ---@param skipAliasResolutionCheck boolean? If set, the resource will be returned even if it has unresolved alias references. You should only set this to `true` if you do not intend to interact with the config's contents.
    ---@return ProjectileConfig
    function ResourceManager:getProjectileConfig(reference, skipAliasResolutionCheck)
        return self:getResourceConfig(reference, "Projectile", skipAliasResolutionCheck)
    end
end

return ProjectileConfig