--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class ShooterMovementConfig
---@overload fun(data, path, isAnonymous):ShooterMovementConfig
local ShooterMovementConfig = class:derive("ShooterMovementConfig")

ShooterMovementConfig.metadata = {
    schemaPath = "shooter_movement.json"
}

---Constructs an instance of ShooterMovementConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
---@param base ShooterMovementConfig? If specified, this resource extends the provided resource. Any missing fields are prepended from the base resource.
function ShooterMovementConfig:new(data, path, isAnonymous, base)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    base = base or {}

    self.type = u.parseString(data, base, path, {"type"})
    if self.type == "linear" then
        self.xMin = u.parseNumber(data, base, path, {"xMin"})
        self.xMax = u.parseNumber(data, base, path, {"xMax"})
        self.y = u.parseNumber(data, base, path, {"y"})
        self.angle = u.parseNumber(data, base, path, {"angle"})
    elseif self.type == "circular" then
        self.x = u.parseNumber(data, base, path, {"x"})
        self.y = u.parseNumber(data, base, path, {"y"})
    else
        error(string.format("Unknown ShooterMovementConfig type: %s (expected \"linear\", \"circular\")", self.type))
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function ShooterMovementConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a ShooterMovementConfig by given path.
    ---@param reference string The path to the resource.
    ---@return ShooterMovementConfig
    function ResourceManager:getShooterMovementConfig(reference)
        return self:getResourceConfig(reference, "ShooterMovement")
    end
end

return ShooterMovementConfig