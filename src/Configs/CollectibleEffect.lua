--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class CollectibleEffectConfig
---@overload fun(data, path, isAnonymous):CollectibleEffectConfig
local CollectibleEffectConfig = class:derive("CollectibleEffectConfig")

CollectibleEffectConfig.metadata = {
    schemaPath = "collectible_effect.json"
}

---Constructs an instance of CollectibleEffectConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
function CollectibleEffectConfig:new(data, path, isAnonymous)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    self.type = u.parseString(data.type, path, "type")
    if self.type == "replaceSphere" then
        self.color = u.parseInteger(data.color, path, "color")
    elseif self.type == "multiSphere" then
        self.color = u.parseInteger(data.color, path, "color")
        self.count = u.parseExprIntegerOpt(data.count, path, "count")
        self.time = u.parseNumberOpt(data.time, path, "time")
        self.removeWhenTimeOut = u.parseBooleanOpt(data.removeWhenTimeOut, path, "removeWhenTimeOut")
        self.holdTimeRate = u.parseNumberOpt(data.holdTimeRate, path, "holdTimeRate")
    elseif self.type == "removeMultiSphere" then
        self.removeSpheres = u.parseBooleanOpt(data.removeSpheres, path, "removeSpheres")
    elseif self.type == "speedShot" then
        self.time = u.parseNumber(data.time, path, "time")
        self.speed = u.parseNumber(data.speed, path, "speed")
    elseif self.type == "homingBugs" then
        self.time = u.parseNumber(data.time, path, "time")
    elseif self.type == "speedOverride" then
        self.speedBase = u.parseNumber(data.speedBase, path, "speedBase")
        self.speedMultiplier = u.parseNumber(data.speedMultiplier, path, "speedMultiplier")
        self.decceleration = u.parseNumber(data.decceleration, path, "decceleration")
        self.time = u.parseNumber(data.time, path, "time")
    elseif self.type == "destroySpheres" then
        self.selector = u.parseSphereSelectorConfig(data.selector, path, "selector")
        self.scoreEvent = u.parseScoreEventConfigOpt(data.scoreEvent, path, "scoreEvent")
        self.scoreEventPerSphere = u.parseScoreEventConfigOpt(data.scoreEventPerSphere, path, "scoreEventPerSphere")
        self.gameEvent = u.parseGameEventConfigOpt(data.gameEvent, path, "gameEvent")
        self.gameEventPerSphere = u.parseGameEventConfigOpt(data.gameEventPerSphere, path, "gameEventPerSphere")
    elseif self.type == "spawnPathEntity" then
        self.pathEntity = u.parsePathEntityConfig(data.pathEntity, path, "pathEntity")
    elseif self.type == "activateNet" then
        self.time = u.parseNumber(data.time, path, "time")
    elseif self.type == "changeGameSpeed" then
        self.speed = u.parseNumber(data.speed, path, "speed")
        self.time = u.parseNumber(data.time, path, "time")
    elseif self.type == "setStreak" then
        self.streak = u.parseInteger(data.streak, path, "streak")
    elseif self.type == "executeScoreEvent" then
        self.scoreEvent = u.parseScoreEventConfig(data.scoreEvent, path, "scoreEvent")
    elseif self.type == "executeGameEvent" then
        self.gameEvent = u.parseGameEventConfig(data.gameEvent, path, "gameEvent")
    elseif self.type == "setScoreMultiplier" then
        self.multiplier = u.parseNumber(data.multiplier, path, "multiplier")
        self.time = u.parseNumber(data.time, path, "time")
    elseif self.type == "collectibleRain" then
        self.collectibleGenerator = u.parseCollectibleGeneratorConfig(data.collectibleGenerator, path, "collectibleGenerator")
        self.count = u.parseExprInteger(data.count, path, "count")
        self.delay = u.parseExprNumber(data.delay, path, "delay")
    elseif self.type == "projectileStorm" then
        self.projectile = u.parseProjectileConfig(data.projectile, path, "projectile")
        self.count = u.parseExprInteger(data.count, path, "count")
        self.delay = u.parseExprNumber(data.delay, path, "delay")
        self.cancelWhenNoTargetsRemaining = u.parseBooleanOpt(data.cancelWhenNoTargetsRemaining, path, "cancelWhenNoTargetsRemaining") == true
    elseif self.type == "colorSort" then
        self.sortType = u.parseString(data.sortType, path, "sortType")
        self.delay = u.parseNumberOpt(data.delay, path, "delay") or 0
        self.stopWhenTampered = u.parseBooleanOpt(data.stopWhenTampered, path, "stopWhenTampered") == true
    elseif self.type == "grantCoin" then
        -- No fields
    elseif self.type == "incrementGemStat" then
        -- No fields
    else
        error(string.format("Unknown CollectibleEffectConfig type: %s (expected \"replaceSphere\", \"multiSphere\", \"removeMultiSphere\", \"speedShot\", \"homingBugs\", \"speedOverride\", \"destroySpheres\", \"spawnPathEntity\", \"activateNet\", \"changeGameSpeed\", \"setStreak\", \"executeScoreEvent\", \"executeGameEvent\", \"setScoreMultiplier\", \"collectibleRain\", \"projectileStorm\", \"colorSort\", \"grantCoin\", \"incrementGemStat\")", self.type))
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function CollectibleEffectConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a CollectibleEffectConfig by a given path or alias.
    ---@param reference string|integer The path or an alias to the resource.
    ---@param skipAliasResolutionCheck boolean? If set, the resource will be returned even if it has unresolved alias references. You should only set this to `true` if you do not intend to interact with the config's contents.
    ---@return CollectibleEffectConfig
    function ResourceManager:getCollectibleEffectConfig(reference, skipAliasResolutionCheck)
        return self:getResourceConfig(reference, "CollectibleEffectConfig", skipAliasResolutionCheck)
    end
end

return CollectibleEffectConfig