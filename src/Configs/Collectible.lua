--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class CollectibleConfig
---@overload fun(data, path, isAnonymous):CollectibleConfig
local CollectibleConfig = class:derive("CollectibleConfig")

CollectibleConfig.metadata = {
    schemaPath = "collectible.json"
}

---Constructs an instance of CollectibleConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
---@param base CollectibleConfig? If specified, this resource extends the provided resource. Any missing fields are prepended from the base resource.
function CollectibleConfig:new(data, path, isAnonymous, base)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    base = base or {}

    self.speed = u.parseExprVec2(data, base, path, {"speed"})
    self.acceleration = u.parseExprVec2(data, base, path, {"acceleration"})
    self.particle = u.parseParticleEffectConfig(data, base, path, {"particle"})
    self.pickupParticle = u.parseParticleEffectConfig(data, base, path, {"pickupParticle"})
    self.spawnSound = u.parseSoundEvent(data, base, path, {"spawnSound"})
    self.pickupSound = u.parseSoundEvent(data, base, path, {"pickupSound"})
    self.pickupName = u.parseStringOpt(data, base, path, {"pickupName"})
    self.pickupFont = u.parseFontOpt(data, base, path, {"pickupFont"})

    self.effects = {}
    if data.effects then
        for i = 1, #data.effects do
            self.effects[i] = u.parseCollectibleEffectConfig(data, base, path, {"effects", i})
        end
    end

    self.dropEffects = {}
    if data.dropEffects then
        for i = 1, #data.dropEffects do
            self.dropEffects[i] = u.parseCollectibleEffectConfig(data, base, path, {"dropEffects", i})
        end
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function CollectibleConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a CollectibleConfig by given path.
    ---@param reference string The path to the resource.
    ---@return CollectibleConfig
    function ResourceManager:getCollectibleConfig(reference)
        return self:getResourceConfig(reference, "Collectible")
    end
end

return CollectibleConfig