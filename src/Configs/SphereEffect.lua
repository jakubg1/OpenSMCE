--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class SphereEffectConfig
---@overload fun(data, path, isAnonymous):SphereEffectConfig
local SphereEffectConfig = class:derive("SphereEffectConfig")

SphereEffectConfig.metadata = {
    schemaPath = "sphere_effect.json"
}

---Constructs an instance of SphereEffectConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
---@param base SphereEffectConfig? If specified, this resource extends the provided resource. Any missing fields are prepended from the base resource.
function SphereEffectConfig:new(data, path, isAnonymous, base)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    base = base or {}

    self.particle = u.parseParticleEffectConfigOpt(data, base, path, {"particle"})
    self.time = u.parseNumber(data, base, path, {"time"})
    self.infectionSize = u.parseInteger(data, base, path, {"infectionSize"})
    self.infectionTime = u.parseNumber(data, base, path, {"infectionTime"})
    self.applySound = u.parseSoundEventOpt(data, base, path, {"applySound"})
    self.destroySound = u.parseSoundEventOpt(data, base, path, {"destroySound"})
    self.destroyScoreEvent = u.parseScoreEventConfigOpt(data, base, path, {"destroyScoreEvent"})
    self.destroyParticle = u.parseParticleEffectConfigOpt(data, base, path, {"destroyParticle"})
    self.destroyCollectible = u.parseCollectibleGeneratorConfigOpt(data, base, path, {"destroyCollectible"})
    self.levelLossProtection = u.parseBoolean(data, base, path, {"levelLossProtection"})
    self.immobile = u.parseBoolean(data, base, path, {"immobile"})
    self.fragile = u.parseBoolean(data, base, path, {"fragile"})
    self.destroyChainedSpheres = u.parseBoolean(data, base, path, {"destroyChainedSpheres"})
    self.canBoostStreak = u.parseBoolean(data, base, path, {"canBoostStreak"})
    self.canBoostCascade = u.parseBoolean(data, base, path, {"canBoostCascade"})
    self.canKeepCascade = u.parseBoolean(data, base, path, {"canKeepCascade"})
    self.causeCheck = u.parseBoolean(data, base, path, {"causeCheck"})
    self.ghostTime = u.parseNumberOpt(data, base, path, {"ghostTime"})

    self.eventsBefore = {}
    if data.eventsBefore then
        for i = 1, #data.eventsBefore do
            self.eventsBefore[i] = u.parseGameEventConfig(data, base, path, {"eventsBefore", i})
        end
    end

    self.eventsAfter = {}
    if data.eventsAfter then
        for i = 1, #data.eventsAfter do
            self.eventsAfter[i] = u.parseGameEventConfig(data, base, path, {"eventsAfter", i})
        end
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function SphereEffectConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a SphereEffectConfig by given path.
    ---@param reference string The path to the resource.
    ---@return SphereEffectConfig
    function ResourceManager:getSphereEffectConfig(reference)
        return self:getResourceConfig(reference, "SphereEffect")
    end
end

return SphereEffectConfig