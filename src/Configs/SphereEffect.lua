--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class SphereEffectConfig
---@overload fun(data, path, isAnonymous):SphereEffectConfig
local SphereEffectConfig = class:derive("SphereEffectConfig")

SphereEffectConfig.metadata = {
    schemaPath = "sphere_effect.json"
}

---Constructs an instance of SphereEffectConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
function SphereEffectConfig:new(data, path, isAnonymous)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    self.particle = u.parseParticleOpt(data.particle, path, "particle")
    self.time = u.parseNumber(data.time, path, "time")
    self.infectionSize = u.parseInteger(data.infectionSize, path, "infectionSize")
    self.infectionTime = u.parseNumber(data.infectionTime, path, "infectionTime")
    self.applySound = u.parseSoundEventOpt(data.applySound, path, "applySound")
    self.destroySound = u.parseSoundEventOpt(data.destroySound, path, "destroySound")
    self.destroyScoreEvent = u.parseScoreEventConfigOpt(data.destroyScoreEvent, path, "destroyScoreEvent")
    self.destroyParticle = u.parseParticleOpt(data.destroyParticle, path, "destroyParticle")
    self.destroyCollectible = u.parseCollectibleGeneratorConfigOpt(data.destroyCollectible, path, "destroyCollectible")
    self.levelLossProtection = u.parseBoolean(data.levelLossProtection, path, "levelLossProtection")
    self.immobile = u.parseBoolean(data.immobile, path, "immobile")
    self.fragile = u.parseBoolean(data.fragile, path, "fragile")
    self.destroyChainedSpheres = u.parseBoolean(data.destroyChainedSpheres, path, "destroyChainedSpheres")
    self.canBoostStreak = u.parseBoolean(data.canBoostStreak, path, "canBoostStreak")
    self.canBoostCascade = u.parseBoolean(data.canBoostCascade, path, "canBoostCascade")
    self.canKeepCascade = u.parseBoolean(data.canKeepCascade, path, "canKeepCascade")
    self.causeCheck = u.parseBoolean(data.causeCheck, path, "causeCheck")
    self.ghostTime = u.parseNumberOpt(data.ghostTime, path, "ghostTime")

    self.eventsBefore = {}
    if data.eventsBefore then
        for i = 1, #data.eventsBefore do
            self.eventsBefore[i] = u.parseGameEventConfig(data.eventsBefore[i], path, "eventsBefore[" .. tostring(i) .. "]")
        end
    end

    self.eventsAfter = {}
    if data.eventsAfter then
        for i = 1, #data.eventsAfter do
            self.eventsAfter[i] = u.parseGameEventConfig(data.eventsAfter[i], path, "eventsAfter[" .. tostring(i) .. "]")
        end
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function SphereEffectConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a SphereEffectConfig by given path.
    ---@param reference string The path to the resource.
    ---@return SphereEffectConfig
    function ResourceManager:getSphereEffectConfig(reference)
        return self:getResourceConfig(reference, "SphereEffect")
    end
end

return SphereEffectConfig