--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class VariableProvidersConfig
---@overload fun(data, path, isAnonymous):VariableProvidersConfig
local VariableProvidersConfig = class:derive("VariableProvidersConfig")

VariableProvidersConfig.metadata = {
    schemaPath = "config/variable_providers.json"
}

---Constructs an instance of VariableProvidersConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
function VariableProvidersConfig:new(data, path, isAnonymous)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    if data.providers then
        self.providers = {}
        for n, _ in pairs(data.providers) do
            self.providers[n] = {}
            self.providers[n].type = u.parseString(data.providers[n].type, path, "providers." .. tostring(n) .. ".type")
            if self.providers[n].type == "value" then
                self.providers[n].value = u.parseInteger(data.providers[n].value, path, "providers." .. tostring(n) .. ".value")
            elseif self.providers[n].type == "countSpheres" then
                self.providers[n].sphereSelector = u.parseSphereSelectorConfig(data.providers[n].sphereSelector, path, "providers." .. tostring(n) .. ".sphereSelector")
            elseif self.providers[n].type == "mostFrequentColor" then
                self.providers[n].sphereSelector = u.parseSphereSelectorConfig(data.providers[n].sphereSelector, path, "providers." .. tostring(n) .. ".sphereSelector")
                self.providers[n].fallback = u.parseExprInteger(data.providers[n].fallback, path, "providers." .. tostring(n) .. ".fallback")
            elseif self.providers[n].type == "randomSpawnableColor" then
                self.providers[n].excludedColors = {}
                if data.providers[n].excludedColors then
                    for i = 1, #data.providers[n].excludedColors do
                        self.providers[n].excludedColors[i] = u.parseInteger(data.providers[n].excludedColors[i], path, "providers." .. tostring(n) .. ".excludedColors[" .. tostring(i) .. "]")
                    end
                end
            elseif self.providers[n].type == "redirectSphere" then
                self.providers[n].sphere = u.parseExprString(data.providers[n].sphere, path, "providers." .. tostring(n) .. ".sphere")
                self.providers[n].sphereSelector = u.parseSphereSelectorConfig(data.providers[n].sphereSelector, path, "providers." .. tostring(n) .. ".sphereSelector")
            elseif self.providers[n].type == "redirectSphereColor" then
                self.providers[n].sphere = u.parseExprString(data.providers[n].sphere, path, "providers." .. tostring(n) .. ".sphere")
                self.providers[n].sphereSelector = u.parseSphereSelectorConfig(data.providers[n].sphereSelector, path, "providers." .. tostring(n) .. ".sphereSelector")
                self.providers[n].fallback = u.parseExprInteger(data.providers[n].fallback, path, "providers." .. tostring(n) .. ".fallback")
            else
                error(string.format("Unknown VariableProvidersConfig type: %s (expected \"value\", \"countSpheres\", \"mostFrequentColor\", \"randomSpawnableColor\", \"redirectSphere\", \"redirectSphereColor\")", self.providers[n].type))
            end
            self.providers[n].framePersistence = u.parseBooleanOpt(data.providers[n].framePersistence, path, "providers." .. tostring(n) .. ".framePersistence")
        end
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function VariableProvidersConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a VariableProvidersConfig by given path.
    ---@param reference string The path to the resource.
    ---@return VariableProvidersConfig
    function ResourceManager:getVariableProvidersConfig(reference)
        return self:getResourceConfig(reference, "VariableProviders")
    end
end

return VariableProvidersConfig