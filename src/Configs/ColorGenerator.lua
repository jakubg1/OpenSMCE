--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class ColorGeneratorConfig
---@overload fun(data, path, isAnonymous):ColorGeneratorConfig
local ColorGeneratorConfig = class:derive("ColorGeneratorConfig")

ColorGeneratorConfig.metadata = {
    schemaPath = "color_generator.json"
}

---Constructs an instance of ColorGeneratorConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
function ColorGeneratorConfig:new(data, path, isAnonymous)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    self.type = u.parseString(data.type, path, "type")
    if self.type == "random" then
        self.hasToExist = u.parseBooleanOpt(data.hasToExist, path, "hasToExist")
        self.discardableColors = {}
        if data.discardableColors then
            for i = 1, #data.discardableColors do
                self.discardableColors[i] = u.parseInteger(data.discardableColors[i], path, "discardableColors[" .. tostring(i) .. "]")
            end
        end
    elseif self.type == "nearEnd" then
        self.selectChance = u.parseNumber(data.selectChance, path, "selectChance")
        self.pathsInDangerOnly = u.parseBoolean(data.pathsInDangerOnly, path, "pathsInDangerOnly")
        self.discardableColors = {}
        if data.discardableColors then
            for i = 1, #data.discardableColors do
                self.discardableColors[i] = u.parseInteger(data.discardableColors[i], path, "discardableColors[" .. tostring(i) .. "]")
            end
        end
    elseif self.type == "giveUp" then
        self.spawnableColorsOnly = u.parseBooleanOpt(data.spawnableColorsOnly, path, "spawnableColorsOnly")
    else
        error(string.format("Unknown ColorGeneratorConfig type: %s (expected \"random\", \"nearEnd\", \"giveUp\")", self.type))
    end

    self.colors = {}
    for i = 1, #data.colors do
        self.colors[i] = u.parseInteger(data.colors[i], path, "colors[" .. tostring(i) .. "]")
    end

    self.fallback = u.parseColorGeneratorConfigOpt(data.fallback, path, "fallback")
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function ColorGeneratorConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a ColorGeneratorConfig by given path.
    ---@param reference string The path to the resource.
    ---@return ColorGeneratorConfig
    function ResourceManager:getColorGeneratorConfig(reference)
        return self:getResourceConfig(reference, "ColorGenerator")
    end
end

return ColorGeneratorConfig