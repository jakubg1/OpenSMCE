--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class DifficultyConfig
---@overload fun(data, path, isAnonymous):DifficultyConfig
local DifficultyConfig = class:derive("DifficultyConfig")

DifficultyConfig.metadata = {
    schemaPath = "difficulty.json"
}

---Constructs an instance of DifficultyConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
function DifficultyConfig:new(data, path, isAnonymous)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    self.speedMultiplier = u.parseNumber(data.speedMultiplier, path, "speedMultiplier")
    self.scoreMultiplier = u.parseNumber(data.scoreMultiplier, path, "scoreMultiplier")

    self.lifeConfig = {}
    self.lifeConfig.type = u.parseString(data.lifeConfig.type, path, "lifeConfig.type")
    if self.lifeConfig.type == "score" then
        self.lifeConfig.startingLives = u.parseInteger(data.lifeConfig.startingLives, path, "lifeConfig.startingLives")
        self.lifeConfig.scorePerLife = u.parseInteger(data.lifeConfig.scorePerLife, path, "lifeConfig.scorePerLife")
        self.lifeConfig.countUnmultipliedScore = u.parseBooleanOpt(data.lifeConfig.countUnmultipliedScore, path, "lifeConfig.countUnmultipliedScore") == true
    elseif self.lifeConfig.type == "coins" then
        self.lifeConfig.startingLives = u.parseInteger(data.lifeConfig.startingLives, path, "lifeConfig.startingLives")
        self.lifeConfig.coinsPerLife = u.parseInteger(data.lifeConfig.coinsPerLife, path, "lifeConfig.coinsPerLife")
    elseif self.lifeConfig.type == "none" then
        -- No fields
    else
        error(string.format("Unknown lifeConfig type: %s (expected \"score\", \"coins\", \"none\")", self.lifeConfig.type))
    end
    self.lifeConfig.rollbackScoreAfterFailure = u.parseBooleanOpt(data.lifeConfig.rollbackScoreAfterFailure, path, "lifeConfig.rollbackScoreAfterFailure") == true
    self.lifeConfig.rollbackCoinsAfterFailure = u.parseBooleanOpt(data.lifeConfig.rollbackCoinsAfterFailure, path, "lifeConfig.rollbackCoinsAfterFailure") == true
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function DifficultyConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a DifficultyConfig by given path.
    ---@param reference string The path to the resource.
    ---@return DifficultyConfig
    function ResourceManager:getDifficultyConfig(reference)
        return self:getResourceConfig(reference, "Difficulty")
    end
end

return DifficultyConfig