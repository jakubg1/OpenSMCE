--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class GameEventConfig
---@overload fun(data, path, isAnonymous):GameEventConfig
local GameEventConfig = class:derive("GameEventConfig")

GameEventConfig.metadata = {
    schemaPath = "game_event.json"
}

---Constructs an instance of GameEventConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
function GameEventConfig:new(data, path, isAnonymous)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    self.type = u.parseString(data.type, path, "type")
    if self.type == "single" then
        self.event = u.parseGameEventConfig(data.event, path, "event")
    elseif self.type == "sequence" then
        self.events = {}
        for i = 1, #data.events do
            self.events[i] = u.parseGameEventConfig(data.events[i], path, "events[" .. tostring(i) .. "]")
        end
    elseif self.type == "random" then
        self.events = {}
        for i = 1, #data.events do
            self.events[i] = u.parseGameEventConfig(data.events[i], path, "events[" .. tostring(i) .. "]")
        end
    elseif self.type == "setCoins" then
        self.value = u.parseExprInteger(data.value, path, "value")
    elseif self.type == "setLevelVariable" then
        self.variable = u.parseString(data.variable, path, "variable")
        self.value = u.parseExprNumber(data.value, path, "value")
    elseif self.type == "setLevelTimer" then
        self.timer = u.parseString(data.timer, path, "timer")
        self.time = u.parseExprNumberOpt(data.time, path, "time") or 0
    elseif self.type == "addToTimerSeries" then
        self.timerSeries = u.parseString(data.timerSeries, path, "timerSeries")
        self.time = u.parseExprNumber(data.time, path, "time")
    elseif self.type == "clearTimerSeries" then
        self.timerSeries = u.parseString(data.timerSeries, path, "timerSeries")
    elseif self.type == "collectibleEffect" then
        self.collectibleEffect = u.parseCollectibleEffectConfig(data.collectibleEffect, path, "collectibleEffect")
    elseif self.type == "scoreEvent" then
        self.scoreEvent = u.parseScoreEventConfig(data.scoreEvent, path, "scoreEvent")
    elseif self.type == "playSound" then
        self.soundEvent = u.parseSoundEvent(data.soundEvent, path, "soundEvent")
    else
        error(string.format("Unknown GameEventConfig type: %s (expected \"single\", \"sequence\", \"random\", \"setCoins\", \"setLevelVariable\", \"setLevelTimer\", \"addToTimerSeries\", \"clearTimerSeries\", \"collectibleEffect\", \"scoreEvent\", \"playSound\")", self.type))
    end

    self.conditions = {}
    if data.conditions then
        for i = 1, #data.conditions do
            self.conditions[i] = u.parseExprBoolean(data.conditions[i], path, "conditions[" .. tostring(i) .. "]")
        end
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function GameEventConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a GameEventConfig by given path.
    ---@param reference string The path to the resource.
    ---@return GameEventConfig
    function ResourceManager:getGameEventConfig(reference)
        return self:getResourceConfig(reference, "GameEvent")
    end
end

return GameEventConfig