--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class GameEventConfig
---@overload fun(data, path, isAnonymous):GameEventConfig
local GameEventConfig = class:derive("GameEventConfig")

GameEventConfig.metadata = {
    schemaPath = "game_event.json"
}

---Constructs an instance of GameEventConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
---@param base GameEventConfig? If specified, this resource extends the provided resource. Any missing fields are prepended from the base resource.
function GameEventConfig:new(data, path, isAnonymous, base)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    base = base or {}

    self.type = u.parseString(data, base, path, {"type"})
    if self.type == "single" then
        self.event = u.parseGameEventConfig(data, base, path, {"event"})
    elseif self.type == "sequence" then
        self.events = {}
        for i = 1, #data.events do
            self.events[i] = u.parseGameEventConfig(data, base, path, {"events", i})
        end
    elseif self.type == "random" then
        self.events = {}
        for i = 1, #data.events do
            self.events[i] = u.parseGameEventConfig(data, base, path, {"events", i})
        end
    elseif self.type == "setCoins" then
        self.value = u.parseExprInteger(data, base, path, {"value"})
    elseif self.type == "setLevelVariable" then
        self.variable = u.parseString(data, base, path, {"variable"})
        self.value = u.parseExprNumber(data, base, path, {"value"})
    elseif self.type == "setLevelTimer" then
        self.timer = u.parseString(data, base, path, {"timer"})
        self.time = u.parseExprNumberOpt(data, base, path, {"time"}) or 0
    elseif self.type == "addToTimerSeries" then
        self.timerSeries = u.parseString(data, base, path, {"timerSeries"})
        self.time = u.parseExprNumber(data, base, path, {"time"})
    elseif self.type == "clearTimerSeries" then
        self.timerSeries = u.parseString(data, base, path, {"timerSeries"})
    elseif self.type == "collectibleEffect" then
        self.collectibleEffect = u.parseCollectibleEffectConfig(data, base, path, {"collectibleEffect"})
    elseif self.type == "scoreEvent" then
        self.scoreEvent = u.parseScoreEventConfig(data, base, path, {"scoreEvent"})
    elseif self.type == "playSound" then
        self.soundEvent = u.parseSoundEvent(data, base, path, {"soundEvent"})
    else
        error(string.format("Unknown GameEventConfig type: %s (expected \"single\", \"sequence\", \"random\", \"setCoins\", \"setLevelVariable\", \"setLevelTimer\", \"addToTimerSeries\", \"clearTimerSeries\", \"collectibleEffect\", \"scoreEvent\", \"playSound\")", self.type))
    end

    self.conditions = {}
    if data.conditions then
        for i = 1, #data.conditions do
            self.conditions[i] = u.parseExprBoolean(data, base, path, {"conditions", i})
        end
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function GameEventConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a GameEventConfig by given path.
    ---@param reference string The path to the resource.
    ---@return GameEventConfig
    function ResourceManager:getGameEventConfig(reference)
        return self:getResourceConfig(reference, "GameEvent")
    end
end

return GameEventConfig