--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class LevelTrainRulesConfig
---@overload fun(data, path, isAnonymous):LevelTrainRulesConfig
local LevelTrainRulesConfig = class:derive("LevelTrainRulesConfig")

LevelTrainRulesConfig.metadata = {
    schemaPath = "level_train_rules.json"
}

---Constructs an instance of LevelTrainRulesConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
function LevelTrainRulesConfig:new(data, path, isAnonymous)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    self.type = u.parseString(data.type, path, "type")
    if self.type == "random" then
        self.colors = {}
        for i = 1, #data.colors do
            self.colors[i] = u.parseInteger(data.colors[i], path, "colors[" .. tostring(i) .. "]")
        end
        self.colorStreak = u.parseNumber(data.colorStreak, path, "colorStreak")
        self.forceDifferentColor = u.parseBooleanOpt(data.forceDifferentColor, path, "forceDifferentColor")
        self.chainChances = {}
        if data.chainChances then
            for i = 1, #data.chainChances do
                self.chainChances[i] = u.parseNumber(data.chainChances[i], path, "chainChances[" .. tostring(i) .. "]")
            end
        end
        self.length = u.parseIntegerOpt(data.length, path, "length")
    elseif self.type == "pattern" then
        self.pattern = {}
        for i = 1, #data.pattern do
            self.pattern[i] = u.parseInteger(data.pattern[i], path, "pattern[" .. tostring(i) .. "]")
        end
        self.chainChances = {}
        if data.chainChances then
            for i = 1, #data.chainChances do
                self.chainChances[i] = u.parseNumber(data.chainChances[i], path, "chainChances[" .. tostring(i) .. "]")
            end
        end
        self.length = u.parseIntegerOpt(data.length, path, "length")
    elseif self.type == "waves" then
        self.key = {}
        for i = 1, #data.key do
            self.key[i] = {}
            self.key[i].key = u.parseStringOpt(data.key[i].key, path, "key[" .. tostring(i) .. "].key")

            self.key[i].keys = {}
            if data.key[i].keys then
                for j = 1, #data.key[i].keys do
                    self.key[i].keys[j] = u.parseString(data.key[i].keys[j], path, "key[" .. tostring(i) .. "].keys[" .. tostring(j) .. "]")
                end
            end

            self.key[i].colors = {}
            for j = 1, #data.key[i].colors do
                self.key[i].colors[j] = u.parseInteger(data.key[i].colors[j], path, "key[" .. tostring(i) .. "].colors[" .. tostring(j) .. "]")
            end

            self.key[i].homogenous = u.parseBooleanOpt(data.key[i].homogenous, path, "key[" .. tostring(i) .. "].homogenous")
            self.key[i].noColorRepeats = u.parseBooleanOpt(data.key[i].noColorRepeats, path, "key[" .. tostring(i) .. "].noColorRepeats")
            self.key[i].colorStreak = u.parseNumberOpt(data.key[i].colorStreak, path, "key[" .. tostring(i) .. "].colorStreak")
            self.key[i].forceDifferentColor = u.parseBooleanOpt(data.key[i].forceDifferentColor, path, "key[" .. tostring(i) .. "].forceDifferentColor")

            self.key[i].chainChances = {}
            if data.key[i].chainChances then
                for j = 1, #data.key[i].chainChances do
                    self.key[i].chainChances[j] = u.parseNumber(data.key[i].chainChances[j], path, "key[" .. tostring(i) .. "].chainChances[" .. tostring(j) .. "]")
                end
            end
        end
        self.waves = {}
        for i = 1, #data.waves do
            self.waves[i] = u.parseString(data.waves[i], path, "waves[" .. tostring(i) .. "]")
        end
        self.behavior = u.parseString(data.behavior, path, "behavior")
    else
        error(string.format("Unknown LevelTrainRulesConfig type: %s (expected \"random\", \"pattern\", \"waves\")", self.type))
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function LevelTrainRulesConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a LevelTrainRulesConfig by given path.
    ---@param reference string The path to the resource.
    ---@return LevelTrainRulesConfig
    function ResourceManager:getLevelTrainRulesConfig(reference)
        return self:getResourceConfig(reference, "LevelTrainRules")
    end
end

return LevelTrainRulesConfig