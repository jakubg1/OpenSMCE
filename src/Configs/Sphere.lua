--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class SphereConfig
---@overload fun(data, path, isAnonymous):SphereConfig
local SphereConfig = class:derive("SphereConfig")

local Vec2 = require("src.Essentials.Vector2")

SphereConfig.metadata = {
    schemaPath = "sphere.json"
}

---Constructs an instance of SphereConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
---@param base SphereConfig? If specified, this resource extends the provided resource. Any missing fields are prepended from the base resource.
function SphereConfig:new(data, path, isAnonymous, base)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    base = base or {}

    self.sprites = {}
    for i = 1, #data.sprites do
        self.sprites[i] = {}
        self.sprites[i].sprite = u.parseSprite(data, base, path, {"sprites", i, "sprite"})
        self.sprites[i].rotate = u.parseBooleanOpt(data, base, path, {"sprites", i, "rotate"}) ~= false
        self.sprites[i].animationSpeed = u.parseNumberOpt(data, base, path, {"sprites", i, "animationSpeed"})
        self.sprites[i].rollingSpeed = u.parseNumberOpt(data, base, path, {"sprites", i, "rollingSpeed"}) or 0.63662

        self.sprites[i].conditions = {}
        if data.sprites[i].conditions then
            for j = 1, #data.sprites[i].conditions do
                self.sprites[i].conditions[j] = u.parseExprBoolean(data, base, path, {"sprites", i, "conditions", j})
            end
        end
    end

    self.shadowSprite = u.parseSpriteOpt(data, base, path, {"shadowSprite"})
    self.shadowOffset = u.parseVec2Opt(data, base, path, {"shadowOffset"}) or Vec2(4, 4)
    self.size = u.parseNumberOpt(data, base, path, {"size"}) or 32
    self.idleParticle = u.parseParticleEffectConfigOpt(data, base, path, {"idleParticle"})
    self.holdParticle = u.parseParticleEffectConfigOpt(data, base, path, {"holdParticle"})
    self.destroyParticle = u.parseParticleEffectConfigOpt(data, base, path, {"destroyParticle"})
    self.destroyCollectible = u.parseCollectibleGeneratorConfigOpt(data, base, path, {"destroyCollectible"})
    self.destroySound = u.parseSoundEventOpt(data, base, path, {"destroySound"})
    self.destroyEvent = u.parseGameEventConfigOpt(data, base, path, {"destroyEvent"})
    self.chainDestroyParticle = u.parseParticleEffectConfigOpt(data, base, path, {"chainDestroyParticle"})
    self.chainDestroySound = u.parseSoundEventOpt(data, base, path, {"chainDestroySound"})
    self.color = u.parseColorOpt(data, base, path, {"color"})
    self.colorPalette = u.parseColorPaletteOpt(data, base, path, {"colorPalette"})
    self.colorPaletteSpeed = u.parseNumberOpt(data, base, path, {"colorPaletteSpeed"})
    self.swappable = u.parseBooleanOpt(data, base, path, {"swappable"}) ~= false

    self.shotBehavior = {}
    self.shotBehavior.type = u.parseString(data, base, path, {"shotBehavior", "type"})
    if self.shotBehavior.type == "normal" then
        self.shotBehavior.amount = u.parseIntegerOpt(data, base, path, {"shotBehavior", "amount"}) or 1
        self.shotBehavior.spreadAngle = u.parseNumberOpt(data, base, path, {"shotBehavior", "spreadAngle"}) or 0
        self.shotBehavior.gameEvent = u.parseGameEventConfigOpt(data, base, path, {"shotBehavior", "gameEvent"})
    elseif self.shotBehavior.type == "destroySpheres" then
        self.shotBehavior.selector = u.parseSphereSelectorConfig(data, base, path, {"shotBehavior", "selector"})
        self.shotBehavior.scoreEvent = u.parseScoreEventConfigOpt(data, base, path, {"shotBehavior", "scoreEvent"})
        self.shotBehavior.scoreEventPerSphere = u.parseScoreEventConfigOpt(data, base, path, {"shotBehavior", "scoreEventPerSphere"})
        self.shotBehavior.gameEvent = u.parseGameEventConfigOpt(data, base, path, {"shotBehavior", "gameEvent"})
        self.shotBehavior.gameEventPerSphere = u.parseGameEventConfigOpt(data, base, path, {"shotBehavior", "gameEventPerSphere"})
    else
        error(string.format("Unknown shotBehavior type: %s (expected \"normal\", \"destroySpheres\")", self.shotBehavior.type))
    end

    self.shotEffects = {}
    if data.shotEffects then
        for i = 1, #data.shotEffects do
            self.shotEffects[i] = u.parseCollectibleEffectConfig(data, base, path, {"shotEffects", i})
        end
    end

    self.shotSpeed = u.parseNumberOpt(data, base, path, {"shotSpeed"})
    self.shotCooldown = u.parseNumberOpt(data, base, path, {"shotCooldown"})
    self.shotSound = u.parseSoundEventOpt(data, base, path, {"shotSound"})

    self.hitBehavior = {}
    self.hitBehavior.type = u.parseString(data, base, path, {"hitBehavior", "type"})
    if self.hitBehavior.type == "normal" then
        self.hitBehavior.effects = {}
        if data.hitBehavior.effects then
            for i = 1, #data.hitBehavior.effects do
                self.hitBehavior.effects[i] = u.parseSphereEffectConfig(data, base, path, {"hitBehavior", "effects", i})
            end
        end
    elseif self.hitBehavior.type == "destroySpheres" then
        self.hitBehavior.selector = u.parseSphereSelectorConfig(data, base, path, {"hitBehavior", "selector"})
        self.hitBehavior.scoreEvent = u.parseScoreEventConfigOpt(data, base, path, {"hitBehavior", "scoreEvent"})
        self.hitBehavior.scoreEventPerSphere = u.parseScoreEventConfigOpt(data, base, path, {"hitBehavior", "scoreEventPerSphere"})
        self.hitBehavior.gameEvent = u.parseGameEventConfigOpt(data, base, path, {"hitBehavior", "gameEvent"})
        self.hitBehavior.gameEventPerSphere = u.parseGameEventConfigOpt(data, base, path, {"hitBehavior", "gameEventPerSphere"})
        self.hitBehavior.pierce = u.parseBooleanOpt(data, base, path, {"hitBehavior", "pierce"})
    elseif self.hitBehavior.type == "recolorSpheres" then
        self.hitBehavior.selector = u.parseSphereSelectorConfig(data, base, path, {"hitBehavior", "selector"})
        self.hitBehavior.color = u.parseExprInteger(data, base, path, {"hitBehavior", "color"})
        self.hitBehavior.particle = u.parseParticleEffectConfigOpt(data, base, path, {"hitBehavior", "particle"})
        self.hitBehavior.pierce = u.parseBooleanOpt(data, base, path, {"hitBehavior", "pierce"})
    elseif self.hitBehavior.type == "splitAndPushBack" then
        self.hitBehavior.speed = u.parseNumber(data, base, path, {"hitBehavior", "speed"})
        self.hitBehavior.pierce = u.parseBooleanOpt(data, base, path, {"hitBehavior", "pierce"})
    elseif self.hitBehavior.type == "applyEffect" then
        self.hitBehavior.selector = u.parseSphereSelectorConfig(data, base, path, {"hitBehavior", "selector"})
        self.hitBehavior.effect = u.parseSphereEffectConfig(data, base, path, {"hitBehavior", "effect"})
        self.hitBehavior.pierce = u.parseBooleanOpt(data, base, path, {"hitBehavior", "pierce"})
    else
        error(string.format("Unknown hitBehavior type: %s (expected \"normal\", \"destroySpheres\", \"recolorSpheres\", \"splitAndPushBack\", \"applyEffect\")", self.hitBehavior.type))
    end

    self.hitSound = u.parseSoundEventOpt(data, base, path, {"hitSound"})
    self.type = u.parseStringOpt(data, base, path, {"type"})
    self.autofire = u.parseBooleanOpt(data, base, path, {"autofire"}) == true

    self.matches = {}
    for i = 1, #data.matches do
        self.matches[i] = u.parseInteger(data, base, path, {"matches", i})
    end

    self.doesNotCollideWith = {}
    if data.doesNotCollideWith then
        for i = 1, #data.doesNotCollideWith do
            self.doesNotCollideWith[i] = u.parseInteger(data, base, path, {"doesNotCollideWith", i})
        end
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function SphereConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a SphereConfig by given path.
    ---@param reference string The path to the resource.
    ---@return SphereConfig
    function ResourceManager:getSphereConfig(reference)
        return self:getResourceConfig(reference, "Sphere")
    end
end

return SphereConfig