--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class ParticleConfig
---@overload fun(data, path, isAnonymous):ParticleConfig
local ParticleConfig = class:derive("ParticleConfig")

ParticleConfig.metadata = {
    schemaPath = "particle.json"
}

---Constructs an instance of ParticleConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
function ParticleConfig:new(data, path, isAnonymous)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    self.movement = {}
    self.movement.type = u.parseString(data.movement.type, path, "movement.type")
    if self.movement.type == "loose" then
        self.movement.speed = u.parseExprVec2(data.movement.speed, path, "movement.speed")
        self.movement.acceleration = u.parseVec2(data.movement.acceleration, path, "movement.acceleration")
    elseif self.movement.type == "radius" then
        self.movement.speed = u.parseExprVec2(data.movement.speed, path, "movement.speed")
        self.movement.acceleration = u.parseVec2(data.movement.acceleration, path, "movement.acceleration")
    elseif self.movement.type == "circle" then
        self.movement.speed = u.parseExprNumber(data.movement.speed, path, "movement.speed")
        self.movement.acceleration = u.parseNumber(data.movement.acceleration, path, "movement.acceleration")
    else
        error(string.format("Unknown movement type: %s (expected \"loose\", \"radius\", \"circle\")", self.movement.type))
    end

    self.spawnScale = u.parseExprVec2(data.spawnScale, path, "spawnScale")
    self.lifespan = u.parseExprNumberOpt(data.lifespan, path, "lifespan")
    self.sprite = u.parseSprite(data.sprite, path, "sprite")
    self.animationFrameCount = u.parseInteger(data.animationFrameCount, path, "animationFrameCount")
    self.animationSpeed = u.parseNumber(data.animationSpeed, path, "animationSpeed")
    self.animationLoop = u.parseBoolean(data.animationLoop, path, "animationLoop")
    self.animationFrameRandom = u.parseBoolean(data.animationFrameRandom, path, "animationFrameRandom")
    self.fadeInPoint = u.parseNumber(data.fadeInPoint, path, "fadeInPoint")
    self.fadeOutPoint = u.parseNumber(data.fadeOutPoint, path, "fadeOutPoint")
    self.posRelative = u.parseBooleanOpt(data.posRelative, path, "posRelative") == true
    self.colorPalette = u.parseColorPaletteOpt(data.colorPalette, path, "colorPalette")
    self.colorPaletteSpeed = u.parseNumberOpt(data.colorPaletteSpeed, path, "colorPaletteSpeed")
    self.directionDeviationTime = u.parseNumberOpt(data.directionDeviationTime, path, "directionDeviationTime")
    self.directionDeviationSpeed = u.parseExprVec2Opt(data.directionDeviationSpeed, path, "directionDeviationSpeed")
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function ParticleConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a ParticleConfig by given path.
    ---@param reference string The path to the resource.
    ---@return ParticleConfig
    function ResourceManager:getParticleConfig(reference)
        return self:getResourceConfig(reference, "Particle")
    end
end

return ParticleConfig