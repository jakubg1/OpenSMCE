--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class CollectibleGeneratorConfig
---@overload fun(data, path, isAnonymous):CollectibleGeneratorConfig
local CollectibleGeneratorConfig = class:derive("CollectibleGeneratorConfig")

CollectibleGeneratorConfig.metadata = {
    schemaPath = "collectible_generator.json"
}

---Constructs an instance of CollectibleGeneratorConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
function CollectibleGeneratorConfig:new(data, path, isAnonymous)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    self.type = u.parseString(data.type, path, "type")
    if self.type == "collectible" then
        self.collectible = u.parseCollectibleConfig(data.collectible, path, "collectible")
    elseif self.type == "collectibleGenerator" then
        self.generator = u.parseCollectibleGeneratorConfig(data.generator, path, "generator")
    elseif self.type == "combine" then
        self.entries = {}
        for i = 1, #data.entries do
            self.entries[i] = u.parseCollectibleGeneratorConfig(data.entries[i], path, "entries[" .. tostring(i) .. "]")
        end
    elseif self.type == "repeat" then
        self.entry = u.parseCollectibleGeneratorConfig(data.entry, path, "entry")
        self.count = u.parseExprInteger(data.count, path, "count")
    elseif self.type == "randomPick" then
        self.pool = {}
        for i = 1, #data.pool do
            self.pool[i] = {}
            self.pool[i].entry = u.parseCollectibleGeneratorConfig(data.pool[i].entry, path, "pool[" .. tostring(i) .. "].entry")
            self.pool[i].weight = u.parseNumberOpt(data.pool[i].weight, path, "pool[" .. tostring(i) .. "].weight")
        end
    else
        error(string.format("Unknown CollectibleGeneratorConfig type: %s (expected \"collectible\", \"collectibleGenerator\", \"combine\", \"repeat\", \"randomPick\")", self.type))
    end

    self.conditions = {}
    if data.conditions then
        for i = 1, #data.conditions do
            self.conditions[i] = u.parseExprBoolean(data.conditions[i], path, "conditions[" .. tostring(i) .. "]")
        end
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function CollectibleGeneratorConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a CollectibleGeneratorConfig by a given path or alias.
    ---@param reference string|integer The path or an alias to the resource.
    ---@param skipAliasResolutionCheck boolean? If set, the resource will be returned even if it has unresolved alias references. You should only set this to `true` if you do not intend to interact with the config's contents.
    ---@return CollectibleGeneratorConfig
    function ResourceManager:getCollectibleGeneratorConfig(reference, skipAliasResolutionCheck)
        return self:getResourceConfig(reference, "CollectibleGenerator", skipAliasResolutionCheck)
    end
end

return CollectibleGeneratorConfig