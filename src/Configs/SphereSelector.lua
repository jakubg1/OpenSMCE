--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class SphereSelectorConfig
---@overload fun(data, path, isAnonymous):SphereSelectorConfig
local SphereSelectorConfig = class:derive("SphereSelectorConfig")

SphereSelectorConfig.metadata = {
    schemaPath = "sphere_selector.json"
}

---Constructs an instance of SphereSelectorConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
function SphereSelectorConfig:new(data, path, isAnonymous)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    self.operations = {}
    for i = 1, #data.operations do
        self.operations[i] = {}
        self.operations[i].type = u.parseString(data.operations[i].type, path, "operations[" .. tostring(i) .. "].type")
        if self.operations[i].type == "add" then
            self.operations[i].condition = u.parseExprBoolean(data.operations[i].condition, path, "operations[" .. tostring(i) .. "].condition")
        elseif self.operations[i].type == "addOne" then
            self.operations[i].sphere = u.parseExprString(data.operations[i].sphere, path, "operations[" .. tostring(i) .. "].sphere")
        elseif self.operations[i].type == "select" then
            self.operations[i].percentage = u.parseNumber(data.operations[i].percentage, path, "operations[" .. tostring(i) .. "].percentage")
            self.operations[i].round = u.parseStringOpt(data.operations[i].round, path, "operations[" .. tostring(i) .. "].round") or "down"
        else
            error(string.format("Unknown SphereSelectorConfig type: %s (expected \"add\", \"addOne\", \"select\")", self.operations[i].type))
        end
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function SphereSelectorConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a SphereSelectorConfig by given path.
    ---@param reference string The path to the resource.
    ---@return SphereSelectorConfig
    function ResourceManager:getSphereSelectorConfig(reference)
        return self:getResourceConfig(reference, "SphereSelector")
    end
end

return SphereSelectorConfig