--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class ScoreEventConfig
---@overload fun(data, path, isAnonymous):ScoreEventConfig
local ScoreEventConfig = class:derive("ScoreEventConfig")

ScoreEventConfig.metadata = {
    schemaPath = "score_event.json"
}

---Constructs an instance of ScoreEventConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
---@param base ScoreEventConfig? If specified, this resource extends the provided resource. Any missing fields are prepended from the base resource.
function ScoreEventConfig:new(data, path, isAnonymous, base)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    base = base or {}

    self.score = u.parseExprInteger(data, base, path, {"score"})
    self.ignoreDifficultyMultiplier = u.parseBooleanOpt(data, base, path, {"ignoreDifficultyMultiplier"})
    self.text = u.parseExprStringOpt(data, base, path, {"text"})
    self.font = u.parseFontOpt(data, base, path, {"font"})

    if data.fonts then
        self.fonts = {}

        self.fonts.options = {}
        for i = 1, #data.fonts.options do
            self.fonts.options[i] = u.parseFont(data, base, path, {"fonts", "options", i})
        end

        self.fonts.default = u.parseFont(data, base, path, {"fonts", "default"})
        self.fonts.choice = u.parseExprInteger(data, base, path, {"fonts", "choice"})
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function ScoreEventConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a ScoreEventConfig by given path.
    ---@param reference string The path to the resource.
    ---@return ScoreEventConfig
    function ResourceManager:getScoreEventConfig(reference)
        return self:getResourceConfig(reference, "ScoreEvent")
    end
end

return ScoreEventConfig