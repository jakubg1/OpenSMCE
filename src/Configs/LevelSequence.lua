--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class LevelSequenceConfig
---@overload fun(data, path, isAnonymous):LevelSequenceConfig
local LevelSequenceConfig = class:derive("LevelSequenceConfig")

LevelSequenceConfig.metadata = {
    schemaPath = "level_sequence.json"
}

---Constructs an instance of LevelSequenceConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
---@param base LevelSequenceConfig? If specified, this resource extends the provided resource. Any missing fields are prepended from the base resource.
function LevelSequenceConfig:new(data, path, isAnonymous, base)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    base = base or {}

    self.sequence = {}
    for i = 1, #data.sequence do
        self.sequence[i] = {}
        self.sequence[i].type = u.parseString(data, base, path, {"sequence", i, "type"})
        if self.sequence[i].type == "wait" then
            self.sequence[i].delay = u.parseNumber(data, base, path, {"sequence", i, "delay"})
        elseif self.sequence[i].type == "waitForCollectibles" then
            -- No fields
        elseif self.sequence[i].type == "uiCallback" then
            self.sequence[i].callback = u.parseString(data, base, path, {"sequence", i, "callback"})
            self.sequence[i].waitUntilFinished = u.parseBooleanOpt(data, base, path, {"sequence", i, "waitUntilFinished"})
            self.sequence[i].retriggerWhenLoaded = u.parseBooleanOpt(data, base, path, {"sequence", i, "retriggerWhenLoaded"}) ~= false
        elseif self.sequence[i].type == "pathEntity" then
            self.sequence[i].pathEntity = u.parsePathEntityConfig(data, base, path, {"sequence", i, "pathEntity"})
            self.sequence[i].separatePaths = u.parseBoolean(data, base, path, {"sequence", i, "separatePaths"})
            self.sequence[i].launchDelay = u.parseNumber(data, base, path, {"sequence", i, "launchDelay"})
            self.sequence[i].waitUntilFinished = u.parseBooleanOpt(data, base, path, {"sequence", i, "waitUntilFinished"})
            self.sequence[i].skippable = u.parseBoolean(data, base, path, {"sequence", i, "skippable"})
        elseif self.sequence[i].type == "gameplay" then
            self.sequence[i].warmupTime = u.parseNumber(data, base, path, {"sequence", i, "warmupTime"})
            self.sequence[i].previewFirstShooterColor = u.parseBooleanOpt(data, base, path, {"sequence", i, "previewFirstShooterColor"})
            self.sequence[i].onFail = u.parseIntegerOpt(data, base, path, {"sequence", i, "onFail"})
            self.sequence[i].onWin = u.parseIntegerOpt(data, base, path, {"sequence", i, "onWin"})
            self.sequence[i].onObjectivesReached = u.parseIntegerOpt(data, base, path, {"sequence", i, "onObjectivesReached"})
        elseif self.sequence[i].type == "fail" then
            self.sequence[i].waitUntilFinished = u.parseBooleanOpt(data, base, path, {"sequence", i, "waitUntilFinished"})
            self.sequence[i].skippable = u.parseBoolean(data, base, path, {"sequence", i, "skippable"})
        elseif self.sequence[i].type == "clearBoard" then
            -- No fields
        elseif self.sequence[i].type == "collectibleEffect" then
            self.sequence[i].effects = {}
            for j = 1, #data.sequence[i].effects do
                self.sequence[i].effects[j] = u.parseCollectibleEffectConfig(data, base, path, {"sequence", i, "effects", j})
            end
        elseif self.sequence[i].type == "executeGameEvent" then
            self.sequence[i].gameEvent = u.parseGameEventConfig(data, base, path, {"sequence", i, "gameEvent"})
        elseif self.sequence[i].type == "end" then
            self.sequence[i].status = u.parseString(data, base, path, {"sequence", i, "status"})
        else
            error(string.format("Unknown LevelSequenceConfig type: %s (expected \"wait\", \"waitForCollectibles\", \"uiCallback\", \"pathEntity\", \"gameplay\", \"fail\", \"clearBoard\", \"collectibleEffect\", \"executeGameEvent\", \"end\")", self.sequence[i].type))
        end
        self.sequence[i].muteMusic = u.parseBooleanOpt(data, base, path, {"sequence", i, "muteMusic"})
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function LevelSequenceConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a LevelSequenceConfig by given path.
    ---@param reference string The path to the resource.
    ---@return LevelSequenceConfig
    function ResourceManager:getLevelSequenceConfig(reference)
        return self:getResourceConfig(reference, "LevelSequence")
    end
end

return LevelSequenceConfig