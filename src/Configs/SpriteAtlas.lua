--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class SpriteAtlasConfig
---@overload fun(data, path, isAnonymous):SpriteAtlasConfig
local SpriteAtlasConfig = class:derive("SpriteAtlasConfig")

SpriteAtlasConfig.metadata = {
    schemaPath = "sprite_atlas.json"
}

---Constructs an instance of SpriteAtlasConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
---@param base SpriteAtlasConfig? If specified, this resource extends the provided resource. Any missing fields are prepended from the base resource.
function SpriteAtlasConfig:new(data, path, isAnonymous, base)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    base = base or {}

    self.sprites = {}
    for i = 1, #data.sprites do
        self.sprites[i] = u.parseSprite(data, base, path, {"sprites", i})
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function SpriteAtlasConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a SpriteAtlasConfig by given path.
    ---@param reference string The path to the resource.
    ---@return SpriteAtlasConfig
    function ResourceManager:getSpriteAtlasConfig(reference)
        return self:getResourceConfig(reference, "SpriteAtlas")
    end
end

return SpriteAtlasConfig