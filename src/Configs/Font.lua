--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class FontConfig
---@overload fun(data, path, isAnonymous):FontConfig
local FontConfig = class:derive("FontConfig")

FontConfig.metadata = {
    schemaPath = "font.json"
}

---Constructs an instance of FontConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
---@param base FontConfig? If specified, this resource extends the provided resource. Any missing fields are prepended from the base resource.
function FontConfig:new(data, path, isAnonymous, base)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    base = base or {}

    self.type = u.parseString(data, base, path, {"type"})
    if self.type == "image" then
        self.image = u.parseImage(data, base, path, {"image"})
        self.characters = {}
        for n, _ in pairs(data.characters) do
            self.characters[n] = {}
            self.characters[n].offset = u.parseInteger(data, base, path, {"characters", n, "offset"})
            self.characters[n].width = u.parseInteger(data, base, path, {"characters", n, "width"})
        end
        self.newlineAdjustment = u.parseNumberOpt(data, base, path, {"newlineAdjustment"}) or 0
    elseif self.type == "truetype" then
        self.file = u.parseFontFile(data, base, path, {"file"})
        self.size = u.parseInteger(data, base, path, {"size"})
        self.color = u.parseColorOpt(data, base, path, {"color"})
    elseif self.type == "bmfont" then
        self.file = u.parseString(data, base, path, {"file"})
        self.color = u.parseColorOpt(data, base, path, {"color"})
    else
        error(string.format("Unknown FontConfig type: %s (expected \"image\", \"truetype\", \"bmfont\")", self.type))
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function FontConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a FontConfig by given path.
    ---@param reference string The path to the resource.
    ---@return FontConfig
    function ResourceManager:getFontConfig(reference)
        return self:getResourceConfig(reference, "Font")
    end
end

return FontConfig