--!!--
-- Auto-generated by DocLang Generator
-- REMOVE THIS COMMENT IF YOU MODIFY THIS FILE
-- in order to protect it from being overwritten!
--!!--

local class = require "com.class"

---@class MapConfig
---@overload fun(data, path, isAnonymous):MapConfig
local MapConfig = class:derive("MapConfig")

MapConfig.metadata = {
    schemaPath = "map.json"
}

---Constructs an instance of MapConfig.
---@param data table Raw data from a file.
---@param path string? Path to the file. Used for error messages and saving data.
---@param isAnonymous boolean? If `true`, this resource is anonymous and its path is invalid for saving data.
---@param base MapConfig? If specified, this resource extends the provided resource. Any missing fields are prepended from the base resource.
function MapConfig:new(data, path, isAnonymous, base)
    local u = _ConfigUtils
    self._path = path
    self._alias = data._alias
    self._isAnonymous = isAnonymous

    base = base or {}

    self.name = u.parseString(data, base, path, {"name"})

    ---@type PathConfig[]
    self.paths = {}
    for i = 1, #data.paths do
        self.paths[i] = u.parsePathConfig(data, base, path, {"paths", i})
    end

    ---@type {x: number, y: number, sprite: Sprite, background: boolean?, foreground: boolean?}[]
    self.sprites = {}
    for i = 1, #data.sprites do
        self.sprites[i] = {}
        self.sprites[i].x = u.parseNumber(data, base, path, {"sprites", i, "x"})
        self.sprites[i].y = u.parseNumber(data, base, path, {"sprites", i, "y"})
        self.sprites[i].sprite = u.parseSprite(data, base, path, {"sprites", i, "sprite"})
        self.sprites[i].background = u.parseBooleanOpt(data, base, path, {"sprites", i, "background"})
        self.sprites[i].foreground = u.parseBooleanOpt(data, base, path, {"sprites", i, "foreground"})
    end
end

---Injects functions to Resource Manager regarding this resource type.
---@param ResourceManager ResourceManager Resource Manager class to inject the functions to.
function MapConfig.inject(ResourceManager)
    ---@class ResourceManager
    ResourceManager = ResourceManager

    ---Retrieves a MapConfig by given path.
    ---@param reference string The path to the resource.
    ---@return MapConfig
    function ResourceManager:getMapConfig(reference)
        return self:getResourceConfig(reference, "Map")
    end
end

return MapConfig