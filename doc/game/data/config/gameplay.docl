- (object) - The root entry.
    - ui (object) - Defines parameters which are constant throughout the entire UI.
        - buttonClickSound* (SoundEvent) - The default Sound Event that will be played whenever a UI button has been clicked.
        - buttonHoverSound* (SoundEvent) - The default Sound Event that will be played whenever a UI button has been hovered with a mouse cursor.
        - buttonReleaseSound* (SoundEvent) - The default Sound Event that will be played whenever a UI button has been released (unpressed).
    - sphereBehavior (object) - Defines behavior of the spheres.
        - acceleration (number) - The default acceleration rate of spheres being pushed.
        - attractionAcceleration* (number) - The acceleration rate of spheres magnetizing to each other.
        - attractionForwardDecceleration* (number) - The decceleration rate of spheres when magnetizing to the group behind while still moving forward.
        - attractionForwardDeccelerationScarab* (number) - The decceleration rate of spheres when magnetizing to a scarab behind while still moving forward.
        - decceleration (number) - The default decceleration rate of spheres.
        - backwardsDecceleration* (number) - The decceleration rate of spheres when they're moving backwards.
        - attractionSpeedBase (number) - Maximum attraction speed of groups of like color being attracted together.\nThis and `attractionSpeedMult` form a final value together using this expression: `attractionSpeedBase + max(1, chain) * attractionSpeedMult`.
        - attractionSpeedMult (number) - The second value used in the formula. For description look at `attractionSpeedBase`.
        - knockbackSpeedBase (number) - Speed induced when a group of spheres crashes into another sphere group behind it.\nThis and `knockbackSpeedMult` form a final value together using this expression: `knockbackSpeedBase + max(1, chain) * knockbackSpeedMult`.
        - knockbackSpeedMult (number) - The second value used in the formula. For description look at `knockbackSpeedBase`.
        - knockbackTime* (number) - If set, this will be the duration the knockback speed will persist for, in seconds.
        - knockbackStopAfterTime* (boolean) - Only if `knockbackTime` is set. If `true`, the speed of the group will be set to 0 once the knockback time is over. Else, the sphere group will deccelerate normally.
        - foulSpeed (number) - Maximum speed of spheres when the player fails to complete a level.
        - foulAcceleration* (number) - The acceleration rate of spheres used only when the player fails to complete a level.
        - foulDestroySpheres (object) {type: The type of level fail animation.} - Determines how the spheres should be destroyed after the level is failed.
            - "atEnd" - The spheres will be destroyed once they reach the final node.
            - "fromEnd" - The spheres will be destroyed starting at the frontmost one every specified amount of time.
                - delay (number) [>=0] - How long it should take for the spheres to start being destroyed, in seconds.
                - subsequentDelay (number) [>0] - The delay between consecutive sphere destructions, in seconds.
        - overspeedCheck (boolean) - If `true`, spheres will never move faster than the maximum speed defined at a given point of the path.
        - invincibleScarabs* (boolean) - If `true`, scarabs cannot be crushed by spheres behind them. Instead, they are pushed.
        - invincibleScarabFrontMatters* (boolean) - If `true`, the trains at the back cannot push the trains at the front and are instead blocked by them.
        - luxorized* (boolean) - Enables sphere physics gimmicks specific to the original Luxor game to mimic it better.
        - joinSound (SoundEvent) - A sound event to be played when two groups of spheres hit each other.
        - newGroupSound (SoundEvent) - A sound event to be played when a new sphere chain appears on the board.
        - noScarabs* (boolean) - If `true`, the scarabs will not appear in the game.
        - noScarabAttraction* (boolean) - If `true`, the scarab will not attract any spheres.
        - permitLongMatches (boolean) - If `true`, the spheres will try to make the biggest clump possible before matching together.
        - instantMatches* (boolean) - If `true`, the spheres will match instantly when they can match. If the match effect has a delay, the sphere will be attached to the nearest sphere and will match after the specified period of time.
    - levelVariables* (object) <<^.*$>> - Defines the starting values for the Level Variables. Keys are variable names, values must be numbers. Level variables will be reset every time the level is retried or a new level is started.
        - (number) - The value for this Level Variable.
    - net* (object) - Defines the Net.
        - particle (Particle) - A persistent particle packet which is spawned when the Net is spawned, and destroyed when the Net expires.
        - sound (SoundEvent) - A looping sound event that will be played when the Net is currently active.
        - posY (integer) - The Y position of the Net.
    - lightningStorm* (object) - Defines the Lightning Storm.
        - delay (%number) [>0] - The delay between strikes. Can be formed as an Expression, which will be evaluated after each strike.
        - particle (Particle) - A one-time particle effect which will be spawned on the sphere that's been destroyed.
        - sound (SoundEvent) - A sound event to be played when a sphere is destroyed.
        - scoreEvent (ScoreEvent) - A Score Event executed on the sphere that's been destroyed.
        - cancelWhenNoSpheresToDestroy* = true (boolean) - If `true`, the entire Lightning Storm will be cancelled when there are no spheres to be destroyed when a strike is to happen. Otherwise, only that particular strike will be wasted.