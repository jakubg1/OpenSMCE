=========================================================================================================================================================================


F	index
N	Main Page

P	Welcome! This is work in progress!
H2	What needs to be done: Collectible Generators (properly), Fonts, Particles, UI stuff

E


=========================================================================================================================================================================


F	overview
N	Overview

P	This page explains various value types and symbols assigned to it.
D	- (number) - A number value.
D	- (string) - A string value.
D	- (boolean) - A boolean value (true or false).
D	- (list) - A list.
D	- (object) - A JSON object.
D	- (Vec2) - A 2D vector. It is a table which contains the following values:
D		- x (number) - The length of the vector along X axis.
D		- y (number) - The length of the vector along Y axis.
D	- (Color) - A color. It is a table which contains the following values:
D		- r (number) - The red component, of a value ranging from 0 to 1.
D		- g (number) - The green component, of a value ranging from 0 to 1.
D		- b (number) - The blue component, of a value ranging from 0 to 1.
D	- (Expression) - An expression. There will be a separate page dedicated for it.
D	- (CollectibleGenerator*) - A pointer which points to a Collectible Generator, in format: "X.json".
D	- (ColorPalette*) - A pointer which points to a Color Palette, i.e. "images/powerups/wild_pal.png".
D	- (Font*) - A pointer which points to a Font, in format: "fonts/X.json".
D	- (Particle*) - A pointer which points to a particle packet, in format: "particles/X.json".
D	- (SoundEvent*) - A pointer which points to a Sound Event, in format: "sound_events/X.json".
D	- (Sprite*) - A pointer which points to a Sprite, in format: "sprites/X.json".

E


=========================================================================================================================================================================


F	config
N	config.json

P	Contains base game settings. This file is placed in the root game folder.
P	Valid JSON structure inside this file is required for the Boot Screen to properly recognize the game. If you make a syntax error, the game will not be listed in the Boot Screen. Look in this file if your game suddenly disappears from the list!
DI	../../schemas/config.json

E


=========================================================================================================================================================================


F	config.collectibles
N	config/collectibles/*.json

P	Defines all collectibles in the game.
P	Each collectibles is stored in a separate file, located in <i>config/collectibles/*.json</i>. The name of the file is the same as ID of that collectible.
P	To add a new collectible, simply create a new file in the aforementioned folder.
P	<i>Note:</i> Collectibles are not rendered as sprites, but rather as particles. The particle packet used to render a collectible needs to be persistent.
DI	../../schemas/config/collectible.json

H2	Possible powerup effects | collectible_effect
P	<i>Debug information: this can be checked in Level:applyEffect().</i>
DIE	../../schemas/config/collectible_effect.json

E


=========================================================================================================================================================================


F	config.collectible_generators
N	config/collectible_generators/*.json

P	Defines all Collectible Generators in the game.
P	Each collectible generator is stored in a separate file, located in <i>config/collectible_generators/*.json</i>. The name of the file is the same as ID of that generator.
P	To add a new collectible generator, simply create a new file in the aforementioned folder.
P	A single collectible generator is a single entry. Various entry types allow chaining or picking from multiple different entries.
P	All entries evaluate to a list of collectibles, and the collectible generator result is evaluated from the root entry.

H2	Allowed collectible generator entry types
P	<i>Debug information: this can be checked in CollectibleGeneratorEntry:evaluate().</i>

H3	<i>collectible</i>
P	Evaluates to a single collectible.
D	- (object) - A single entry.
D		- type (string) - <b><i>collectible</i></b>
D		- name (string) - A collectible ID to be evaluated to.
D		- conditions* (list) - A list of conditions. All of them must be satisfied. In other case, this entry will not generate any collectibles and return an empty list. More info below.

H3	<i>collectibleGenerator</i>
P	Evaluates to another collectible generator result.
D	- (object) - A single entry.
D		- type (string) - <b><i>collectibleGenerator</i></b>
D		- name (string) - A collectible generator ID to be evaluated.
D		- conditions* (list) - A list of conditions. All of them must be satisfied. In other case, this entry will not generate any collectibles and return an empty list. More info below.

H3	<i>combine</i>
P	Evaluates a list of given entries and returns a list of all collectibles generated.
D	- (object) - A single entry.
D		- type (string) - <b><i>combine</i></b>
D		- entries (list) - A list of collectible entries to be evaluated.
D		- conditions* (list) - A list of conditions. All of them must be satisfied. In other case, this entry will not generate any collectibles and return an empty list. More info below.

H3	<i>repeat</i>
P	Evaluates a given entry a number of times and returns a list of all collectibles generated.
D	- (object) - A single entry.
D		- type (string) - <b><i>repeat</i></b>
D		- entry (object) - A collectible entry to be evaluated.
D		- count (Expression|number) - How many times the entry should be evaluated.
D		- conditions* (list) - A list of conditions. All of them must be satisfied. In other case, this entry will not generate any collectibles and return an empty list. More info below.

H3	<i>randomPick</i>
P	Evaluates all the choices, discards empty ones, and selects one of the remaining results at random.
D	- (object) - A single entry.
D		- type (string) - <b><i>randomPick</i></b>
D		- pool (list) - A list of choices to be picked from.
D			- (object) - A single choice.
D				- entry (object) - A collectible entry to be evaluated.
D				- weight* (number) - The bigger this number is, the more likely this option is to be chosen. Defaults to 1.
D		- conditions* (list) - A list of conditions. All of them must be satisfied. In other case, this entry will not generate any collectibles and return an empty list. More info below.

H2	Allowed collectible generator conditions
P	<i>Debug information: this can be checked in CollectibleGeneratorEntry:checkCondition().</i>

H3	<i>expression</i>
P	Returns true if the provided expression returns true.
D	- (object) - A single condition.
D		- type (string) - <b><i>expression</i></b>
D		- expression (Expression|boolean) - An expression to be evaluated.

H3	<i>colorPresent</i>
P	Returns true if a given color is present on the board.
D	- (object) - A single condition.
D		- type (string) - <b><i>colorPresent</i></b>
D		- color (number) - A color to be checked.

H3	<i>cmpLatestCheckpoint</i>
P	Returns true if the profile latest checkpoint value is within defined bounds.
D	- (object) - A single condition.
D		- type (string) - <b><i>cmpLatestCheckpoint</i></b>
D		- min* (number) - If the checked value is lower than this value, this check will fail.
D		- max* (number) - If the checked value is greater than this value, this check will fail.
D		- value* (number) - If the checked value is not equal to this value, this check will fail.

E


=========================================================================================================================================================================


F	config.color_generators
N	config/color_generators/*.json

P	Defines a Color Generator. Color generators are used to determine which color should spawn next in the Shooter.
DI	../../schemas/config/color_generator.json

E


=========================================================================================================================================================================


F	config.levels
N	config/levels/level_*.json

P	Level files contain information about sphere speeds, colors, etc.
P	Useful vocabulary: We say the player is in <i>danger</i> when the spheres are close to the end point of the path and the pyramid starts blinking.
DI	../../schemas/config/level.json

H2	Possible spawn rule types | level_spawn_rules
P	<i>Debug information: this can be checked in SphereChain:new().</i>
DIE	../../schemas/config/level_spawn_rules.json

H2	Possible speed interpolation types | level_speed_transition
P	<i>Debug information: this can be checked in Path:getSpeed().</i>
DIE	../../schemas/config/level_speed_transition.json

E


=========================================================================================================================================================================


F	config.shooter
N	config/shooters/*.json

P	Defines a Shooter.
DI	../../schemas/config/shooter.json

H2	Possible shooter movement types | shooter_movement
P	<i>Debug information: this can be checked in Shooter:update(), Shooter:getInitialPos() and Shooter:getInitialAngle().</i>
DIE	../../schemas/config/shooter_movement.json

E


=========================================================================================================================================================================


F	config.sphere_effects
N	config/sphere_effects/*.json

P	Defines all Sphere Effects in the game.
P	A sphere effect can be applied to any sphere. After a certain time, spheres "infected" with a given effect will be destroyed.
P	A sphere can also infect neighbors, if it has been configured to do so. Until the infection size gets to 0, the infection time is counted each time. When it gets to 0, the main destruction timer starts.
P	When the sphere effect timer gets to 0, all spheres which have that same effect and were caused by the same sphere will be destroyed.
DI	../../schemas/config/sphere_effect.json

E


=========================================================================================================================================================================


F	config.spheres
N	config/spheres/sphere_*.json

P	Defines all sphere types in the game.
P	Each sphere is stored in a separate file, located in <i>config/spheres/sphere_*.json</i>, where the asterisk is your sphere ID.
P	To add a new sphere, simply create a new file in the aforementioned folder, making sure that you name it correctly and the ID is unique.
PS	A sphere ID must be an integer number. The numbers do not have to be continuous. Make sure you follow the following guidelines:
R	<ol>
R	<li>ID = 0 is reserved by the sphere pusher (e.g. a scarab).</li>
R	<li>Negative IDs should be used for powerup balls (i.e. a fireball, dagger, color cloud, etc.).</li>
R	<li>Positive IDs should be used for ordinary balls which spawn in the game.</li>
PE	</ol>
DI	../../schemas/config/sphere.json

H2	Possible shoot behaviors | sphere_shoot_behavior
P	<i>Debug information: this can be checked in Shooter:shoot().</i>
DIE	../../schemas/config/sphere_shoot_behavior.json

H2	Possible hit behaviors | sphere_hit_behavior
P	<i>Debug information: this can be checked in ShotSphere:moveStep().</i>
DIE	../../schemas/config/sphere_hit_behavior.json

E


=========================================================================================================================================================================


F	config.gameplay
N	config/gameplay.json

P	Defines behavior of various game elements.
DI	../../schemas/config/gameplay.json

E


=========================================================================================================================================================================


F	config.highscores
N	config/highscores.json

P	Contains default scoreboard settings. These are used when launching the game for the first time or when resetting the highscores manually.
DI	../../schemas/config/highscores.json

E


=========================================================================================================================================================================


F	config.hud_layer_order
N	config/hud_layer_order.json

P	This file lists all UI layers and the order in which they will be drawn, in order from the bottom to the top.
P	All gameplay elements are rendered first and thus are displayed at the bottom, sometimes with a <i>MAIN</i> layer assigned.
P	The first layer specified in this file should be <b>"MAIN"</b>!
D	- (list) - A list of layers.
D		- (string) - A single layer name.

E


=========================================================================================================================================================================


F	config.level_set
N	config/level_set.json

P	Contains information about level order and checkpoints.
P	A checkpoint is a place, where the player can start a new game.
DI	../../schemas/config/level_set.json

H2	Possible level order entry types | level_set_entry
P	<i>Debug information: this can be checked in Profile:getLevelName(), Profile:incrementLevel(), Profile:generateLevelID() and a number of other functions in Profile class.</i>
DIE	../../schemas/config/level_set_entry.json

E


=========================================================================================================================================================================


F	config.loadlist
N	config/loadlist.json

P	This file contains all assets necessary to be loaded in order to display the Splash Screen properly.
P	All assets not mentioned here (except Color Palettes, which must be specified here!) will be loaded after the Splash Screen shows up and a <i>loadMain</i> UI script callback is executed.
P	Try keeping the amount of assets listed in this file at a minimum!
DI	../../schemas/config/loadlist.json

E


=========================================================================================================================================================================


F	config.music
N	config/music.json

P	This file maps the soundtrack names to music files.
D	- (object) - Key names are soundtrack names, and their corresponding values are paths to the music files.

E


=========================================================================================================================================================================


F	font
N	fonts/*.json

P	Defines a single Font.
P	There are two distinct ways to create Fonts. You can use a TTF file, or you can create an image file with all the characters. The former is easier to set up, but the latter gives you more control over the design of the characters and takes up less space on disk.
DIE	../../schemas/font.json

E


=========================================================================================================================================================================


F	map
N	maps/*/config.json

P	This is the map configuration file. Defines the Map's name, paths and sprites.
DI	../../schemas/map.json

E


=========================================================================================================================================================================


F	particle
N	particles/*.json

P	Defines a single Particle Packet.
P	A single Particle Packet is a packet of Particle Spawners (also called Emitters), each of which spawning a certain number of Particles themselves.
PS	There are two types of Particle Packets:
R	<ul>
R	<li><b>One-time particle packets</b> spawn particles which eventually despawn. An example of such packet is a ball destroy particle or an extra life particle.</li>
R	<li><b>Persistent particle packets</b> feature at least one Particle Spawner which stays active indefinitely or produces particles which stay indefinitely on the screen. The governing object must explicitly destroy them in order to get rid of them. They can also be moved around, unlike one-time packets. Examples of such packets are powerups and the shooter particle on the stage map.</li>
PE	</ul>

DI	../../schemas/particle.json

E


=========================================================================================================================================================================


F	sound_event
N	sound_events/*.json

P	Describes a Sound Event.
DI	../../schemas/sound_event.json

E


=========================================================================================================================================================================


F	sprite
N	sprites/*.json

P	Describes a Sprite.
DI	../../schemas/sprite.json

E


=========================================================================================================================================================================
