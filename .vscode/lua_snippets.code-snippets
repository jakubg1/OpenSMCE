{
	// Place your OpenSMCE workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Class definition": {
		"scope": "lua",
		"prefix": "!class",
		"body": [
			"local class = require \"com.class\"",
			"",
			"---@class ${TM_FILENAME_BASE}",
			"---@overload fun(${1:params}):${TM_FILENAME_BASE}",
			"local ${TM_FILENAME_BASE} = class:derive(\"${TM_FILENAME_BASE}\")",
			"",
			"-- Place your imports here",
			"",
			"",
			"",
			"function ${TM_FILENAME_BASE}:new(${1:params})",
			"\t$0",
			"end",
			"",
			"",
			"",
			"return ${TM_FILENAME_BASE}"
		],
		"description": "Generate a class stub."
	},
	"Class definition with custom name": {
		"scope": "lua",
		"prefix": "!classn",
		"body": [
			"local class = require \"com.class\"",
			"",
			"---@class ${1:${TM_FILENAME_BASE}}",
			"---@overload fun(${2:params}):${1:${TM_FILENAME_BASE}}",
			"local ${1:${TM_FILENAME_BASE}} = class:derive(\"${1:${TM_FILENAME_BASE}}\")",
			"",
			"-- Place your imports here",
			"",
			"",
			"",
			"function ${1:${TM_FILENAME_BASE}}:new(${2:params})",
			"\t$0",
			"end",
			"",
			"",
			"",
			"return ${1:${TM_FILENAME_BASE}}"
		],
		"description": "Generate a class stub with a custom name."
	}
}